//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Authentication`.
    static let authentication = _R.storyboard.authentication()
    /// Storyboard `Details`.
    static let details = _R.storyboard.details()
    /// Storyboard `HelpSupport`.
    static let helpSupport = _R.storyboard.helpSupport()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `NewJob`.
    static let newJob = _R.storyboard.newJob()
    /// Storyboard `SideMenu`.
    static let sideMenu = _R.storyboard.sideMenu()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Authentication", bundle: ...)`
    static func authentication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authentication)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Details", bundle: ...)`
    static func details(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.details)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HelpSupport", bundle: ...)`
    static func helpSupport(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.helpSupport)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NewJob", bundle: ...)`
    static func newJob(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newJob)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SideMenu", bundle: ...)`
    static func sideMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sideMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `greyBack`.
    static let greyBack = Rswift.ColorResource(bundle: R.hostingBundle, name: "greyBack")
    /// Color `primaryColor`.
    static let primaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryColor")
    /// Color `primaryTextColor`.
    static let primaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "greyBack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greyBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greyBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 281 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Montserrat-Black.ttf`.
    static let montserratBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Black", pathExtension: "ttf")
    /// Resource file `Montserrat-Bold.ttf`.
    static let montserratBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Bold", pathExtension: "ttf")
    /// Resource file `Montserrat-BoldItalic.ttf`.
    static let montserratBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-BoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraBold.ttf`.
    static let montserratExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraBold", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraBoldItalic.ttf`.
    static let montserratExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraLight.ttf`.
    static let montserratExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraLight", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraLightItalic.ttf`.
    static let montserratExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Italic.ttf`.
    static let montserratItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Italic", pathExtension: "ttf")
    /// Resource file `Montserrat-Light.ttf`.
    static let montserratLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Light", pathExtension: "ttf")
    /// Resource file `Montserrat-LightItalic.ttf`.
    static let montserratLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-LightItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Medium.ttf`.
    static let montserratMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Medium", pathExtension: "ttf")
    /// Resource file `Montserrat-MediumItalic.ttf`.
    static let montserratMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-MediumItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Regular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Regular", pathExtension: "ttf")
    /// Resource file `Montserrat-SemiBold.ttf`.
    static let montserratSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-SemiBold", pathExtension: "ttf")
    /// Resource file `Montserrat-SemiBoldItalic.ttf`.
    static let montserratSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Thin.ttf`.
    static let montserratThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Thin", pathExtension: "ttf")
    /// Resource file `Montserrat-ThinItalic.ttf`.
    static let montserratThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ThinItalic", pathExtension: "ttf")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    /// Resource file `SFProDisplay.ttf`.
    static let sfProDisplayTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay", pathExtension: "ttf")
    /// Resource file `ad.png`.
    static let adPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ad", pathExtension: "png")
    /// Resource file `ae.png`.
    static let aePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ae", pathExtension: "png")
    /// Resource file `af.png`.
    static let afPng = Rswift.FileResource(bundle: R.hostingBundle, name: "af", pathExtension: "png")
    /// Resource file `ag.png`.
    static let agPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ag", pathExtension: "png")
    /// Resource file `ai.png`.
    static let aiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ai", pathExtension: "png")
    /// Resource file `al.png`.
    static let alPng = Rswift.FileResource(bundle: R.hostingBundle, name: "al", pathExtension: "png")
    /// Resource file `am.png`.
    static let amPng = Rswift.FileResource(bundle: R.hostingBundle, name: "am", pathExtension: "png")
    /// Resource file `ao.png`.
    static let aoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ao", pathExtension: "png")
    /// Resource file `aq.png`.
    static let aqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "aq", pathExtension: "png")
    /// Resource file `ar.png`.
    static let arPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ar", pathExtension: "png")
    /// Resource file `as.png`.
    static let asPng = Rswift.FileResource(bundle: R.hostingBundle, name: "as", pathExtension: "png")
    /// Resource file `at.png`.
    static let atPng = Rswift.FileResource(bundle: R.hostingBundle, name: "at", pathExtension: "png")
    /// Resource file `au.png`.
    static let auPng = Rswift.FileResource(bundle: R.hostingBundle, name: "au", pathExtension: "png")
    /// Resource file `aw.png`.
    static let awPng = Rswift.FileResource(bundle: R.hostingBundle, name: "aw", pathExtension: "png")
    /// Resource file `ax.png`.
    static let axPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ax", pathExtension: "png")
    /// Resource file `az.png`.
    static let azPng = Rswift.FileResource(bundle: R.hostingBundle, name: "az", pathExtension: "png")
    /// Resource file `ba.png`.
    static let baPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ba", pathExtension: "png")
    /// Resource file `bb.png`.
    static let bbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bb", pathExtension: "png")
    /// Resource file `bd.png`.
    static let bdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bd", pathExtension: "png")
    /// Resource file `be.png`.
    static let bePng = Rswift.FileResource(bundle: R.hostingBundle, name: "be", pathExtension: "png")
    /// Resource file `bf.png`.
    static let bfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bf", pathExtension: "png")
    /// Resource file `bg.png`.
    static let bgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bg", pathExtension: "png")
    /// Resource file `bh.png`.
    static let bhPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bh", pathExtension: "png")
    /// Resource file `bi.png`.
    static let biPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bi", pathExtension: "png")
    /// Resource file `bj.png`.
    static let bjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bj", pathExtension: "png")
    /// Resource file `bl.png`.
    static let blPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bl", pathExtension: "png")
    /// Resource file `bm.png`.
    static let bmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bm", pathExtension: "png")
    /// Resource file `bn.png`.
    static let bnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bn", pathExtension: "png")
    /// Resource file `bo.png`.
    static let boPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bo", pathExtension: "png")
    /// Resource file `bq.png`.
    static let bqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bq", pathExtension: "png")
    /// Resource file `br.png`.
    static let brPng = Rswift.FileResource(bundle: R.hostingBundle, name: "br", pathExtension: "png")
    /// Resource file `bs.png`.
    static let bsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bs", pathExtension: "png")
    /// Resource file `bt.png`.
    static let btPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bt", pathExtension: "png")
    /// Resource file `bv.png`.
    static let bvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bv", pathExtension: "png")
    /// Resource file `bw.png`.
    static let bwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bw", pathExtension: "png")
    /// Resource file `by.png`.
    static let byPng = Rswift.FileResource(bundle: R.hostingBundle, name: "by", pathExtension: "png")
    /// Resource file `bz.png`.
    static let bzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bz", pathExtension: "png")
    /// Resource file `ca.png`.
    static let caPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ca", pathExtension: "png")
    /// Resource file `cc.png`.
    static let ccPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cc", pathExtension: "png")
    /// Resource file `cd.png`.
    static let cdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cd", pathExtension: "png")
    /// Resource file `cf.png`.
    static let cfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cf", pathExtension: "png")
    /// Resource file `cg.png`.
    static let cgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cg", pathExtension: "png")
    /// Resource file `ch.png`.
    static let chPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ch", pathExtension: "png")
    /// Resource file `ci.png`.
    static let ciPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ci", pathExtension: "png")
    /// Resource file `ck.png`.
    static let ckPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ck", pathExtension: "png")
    /// Resource file `cl.png`.
    static let clPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cl", pathExtension: "png")
    /// Resource file `cm.png`.
    static let cmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cm", pathExtension: "png")
    /// Resource file `cn.png`.
    static let cnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cn", pathExtension: "png")
    /// Resource file `co.png`.
    static let coPng = Rswift.FileResource(bundle: R.hostingBundle, name: "co", pathExtension: "png")
    /// Resource file `cr.png`.
    static let crPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cr", pathExtension: "png")
    /// Resource file `cu.png`.
    static let cuPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cu", pathExtension: "png")
    /// Resource file `cv.png`.
    static let cvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cv", pathExtension: "png")
    /// Resource file `cw.png`.
    static let cwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cw", pathExtension: "png")
    /// Resource file `cx.png`.
    static let cxPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cx", pathExtension: "png")
    /// Resource file `cy.png`.
    static let cyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cy", pathExtension: "png")
    /// Resource file `cz.png`.
    static let czPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cz", pathExtension: "png")
    /// Resource file `de.png`.
    static let dePng = Rswift.FileResource(bundle: R.hostingBundle, name: "de", pathExtension: "png")
    /// Resource file `dj.png`.
    static let djPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dj", pathExtension: "png")
    /// Resource file `dk.png`.
    static let dkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dk", pathExtension: "png")
    /// Resource file `dm.png`.
    static let dmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dm", pathExtension: "png")
    /// Resource file `do.png`.
    static let doPng = Rswift.FileResource(bundle: R.hostingBundle, name: "do", pathExtension: "png")
    /// Resource file `dz.png`.
    static let dzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dz", pathExtension: "png")
    /// Resource file `ec.png`.
    static let ecPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ec", pathExtension: "png")
    /// Resource file `ee.png`.
    static let eePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ee", pathExtension: "png")
    /// Resource file `eg.png`.
    static let egPng = Rswift.FileResource(bundle: R.hostingBundle, name: "eg", pathExtension: "png")
    /// Resource file `eh.png`.
    static let ehPng = Rswift.FileResource(bundle: R.hostingBundle, name: "eh", pathExtension: "png")
    /// Resource file `er.png`.
    static let erPng = Rswift.FileResource(bundle: R.hostingBundle, name: "er", pathExtension: "png")
    /// Resource file `es.png`.
    static let esPng = Rswift.FileResource(bundle: R.hostingBundle, name: "es", pathExtension: "png")
    /// Resource file `et.png`.
    static let etPng = Rswift.FileResource(bundle: R.hostingBundle, name: "et", pathExtension: "png")
    /// Resource file `fi.png`.
    static let fiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fi", pathExtension: "png")
    /// Resource file `fj.png`.
    static let fjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fj", pathExtension: "png")
    /// Resource file `fk.png`.
    static let fkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fk", pathExtension: "png")
    /// Resource file `fm.png`.
    static let fmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fm", pathExtension: "png")
    /// Resource file `fo.png`.
    static let foPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fo", pathExtension: "png")
    /// Resource file `fr.png`.
    static let frPng = Rswift.FileResource(bundle: R.hostingBundle, name: "fr", pathExtension: "png")
    /// Resource file `ga.png`.
    static let gaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ga", pathExtension: "png")
    /// Resource file `gb.png`.
    static let gbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gb", pathExtension: "png")
    /// Resource file `gd.png`.
    static let gdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gd", pathExtension: "png")
    /// Resource file `ge.png`.
    static let gePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ge", pathExtension: "png")
    /// Resource file `gf.png`.
    static let gfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gf", pathExtension: "png")
    /// Resource file `gg.png`.
    static let ggPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gg", pathExtension: "png")
    /// Resource file `gh.png`.
    static let ghPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gh", pathExtension: "png")
    /// Resource file `gi.png`.
    static let giPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gi", pathExtension: "png")
    /// Resource file `gl.png`.
    static let glPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gl", pathExtension: "png")
    /// Resource file `gm.png`.
    static let gmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gm", pathExtension: "png")
    /// Resource file `gn.png`.
    static let gnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gn", pathExtension: "png")
    /// Resource file `gp.png`.
    static let gpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gp", pathExtension: "png")
    /// Resource file `gq.png`.
    static let gqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gq", pathExtension: "png")
    /// Resource file `gr.png`.
    static let grPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gr", pathExtension: "png")
    /// Resource file `gs.png`.
    static let gsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gs", pathExtension: "png")
    /// Resource file `gt.png`.
    static let gtPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gt", pathExtension: "png")
    /// Resource file `gu.png`.
    static let guPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gu", pathExtension: "png")
    /// Resource file `gw.png`.
    static let gwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gw", pathExtension: "png")
    /// Resource file `gy.png`.
    static let gyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "gy", pathExtension: "png")
    /// Resource file `hk.png`.
    static let hkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hk", pathExtension: "png")
    /// Resource file `hm.png`.
    static let hmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hm", pathExtension: "png")
    /// Resource file `hn.png`.
    static let hnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hn", pathExtension: "png")
    /// Resource file `hr.png`.
    static let hrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hr", pathExtension: "png")
    /// Resource file `ht.png`.
    static let htPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ht", pathExtension: "png")
    /// Resource file `hu.png`.
    static let huPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hu", pathExtension: "png")
    /// Resource file `id.png`.
    static let idPng = Rswift.FileResource(bundle: R.hostingBundle, name: "id", pathExtension: "png")
    /// Resource file `ie.png`.
    static let iePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ie", pathExtension: "png")
    /// Resource file `il.png`.
    static let ilPng = Rswift.FileResource(bundle: R.hostingBundle, name: "il", pathExtension: "png")
    /// Resource file `im.png`.
    static let imPng = Rswift.FileResource(bundle: R.hostingBundle, name: "im", pathExtension: "png")
    /// Resource file `in.png`.
    static let inPng = Rswift.FileResource(bundle: R.hostingBundle, name: "in", pathExtension: "png")
    /// Resource file `io.png`.
    static let ioPng = Rswift.FileResource(bundle: R.hostingBundle, name: "io", pathExtension: "png")
    /// Resource file `iq.png`.
    static let iqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "iq", pathExtension: "png")
    /// Resource file `ir.png`.
    static let irPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ir", pathExtension: "png")
    /// Resource file `is.png`.
    static let isPng = Rswift.FileResource(bundle: R.hostingBundle, name: "is", pathExtension: "png")
    /// Resource file `it.png`.
    static let itPng = Rswift.FileResource(bundle: R.hostingBundle, name: "it", pathExtension: "png")
    /// Resource file `je.png`.
    static let jePng = Rswift.FileResource(bundle: R.hostingBundle, name: "je", pathExtension: "png")
    /// Resource file `jm.png`.
    static let jmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "jm", pathExtension: "png")
    /// Resource file `jo.png`.
    static let joPng = Rswift.FileResource(bundle: R.hostingBundle, name: "jo", pathExtension: "png")
    /// Resource file `jp.png`.
    static let jpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "jp", pathExtension: "png")
    /// Resource file `ke.png`.
    static let kePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ke", pathExtension: "png")
    /// Resource file `kg.png`.
    static let kgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kg", pathExtension: "png")
    /// Resource file `kh.png`.
    static let khPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kh", pathExtension: "png")
    /// Resource file `ki.png`.
    static let kiPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ki", pathExtension: "png")
    /// Resource file `km.png`.
    static let kmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "km", pathExtension: "png")
    /// Resource file `kn.png`.
    static let knPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kn", pathExtension: "png")
    /// Resource file `kp.png`.
    static let kpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kp", pathExtension: "png")
    /// Resource file `kr.png`.
    static let krPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kr", pathExtension: "png")
    /// Resource file `kw.png`.
    static let kwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kw", pathExtension: "png")
    /// Resource file `ky.png`.
    static let kyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ky", pathExtension: "png")
    /// Resource file `kz.png`.
    static let kzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "kz", pathExtension: "png")
    /// Resource file `la.png`.
    static let laPng = Rswift.FileResource(bundle: R.hostingBundle, name: "la", pathExtension: "png")
    /// Resource file `lb.png`.
    static let lbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lb", pathExtension: "png")
    /// Resource file `lc.png`.
    static let lcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lc", pathExtension: "png")
    /// Resource file `li.png`.
    static let liPng = Rswift.FileResource(bundle: R.hostingBundle, name: "li", pathExtension: "png")
    /// Resource file `lk.png`.
    static let lkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lk", pathExtension: "png")
    /// Resource file `loader_animation.json`.
    static let loader_animationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loader_animation", pathExtension: "json")
    /// Resource file `lr.png`.
    static let lrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lr", pathExtension: "png")
    /// Resource file `ls.png`.
    static let lsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ls", pathExtension: "png")
    /// Resource file `lt.png`.
    static let ltPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lt", pathExtension: "png")
    /// Resource file `lu.png`.
    static let luPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lu", pathExtension: "png")
    /// Resource file `lv.png`.
    static let lvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "lv", pathExtension: "png")
    /// Resource file `ly.png`.
    static let lyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ly", pathExtension: "png")
    /// Resource file `ma.png`.
    static let maPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ma", pathExtension: "png")
    /// Resource file `mc.png`.
    static let mcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mc", pathExtension: "png")
    /// Resource file `md.png`.
    static let mdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "md", pathExtension: "png")
    /// Resource file `me.png`.
    static let mePng = Rswift.FileResource(bundle: R.hostingBundle, name: "me", pathExtension: "png")
    /// Resource file `mexApp_Loader.json`.
    static let mexApp_LoaderJson = Rswift.FileResource(bundle: R.hostingBundle, name: "mexApp_Loader", pathExtension: "json")
    /// Resource file `mf.png`.
    static let mfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mf", pathExtension: "png")
    /// Resource file `mg.png`.
    static let mgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mg", pathExtension: "png")
    /// Resource file `mh.png`.
    static let mhPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mh", pathExtension: "png")
    /// Resource file `mk.png`.
    static let mkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mk", pathExtension: "png")
    /// Resource file `ml.png`.
    static let mlPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ml", pathExtension: "png")
    /// Resource file `mm.png`.
    static let mmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mm", pathExtension: "png")
    /// Resource file `mn.png`.
    static let mnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mn", pathExtension: "png")
    /// Resource file `mo.png`.
    static let moPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mo", pathExtension: "png")
    /// Resource file `mp.png`.
    static let mpPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mp", pathExtension: "png")
    /// Resource file `mq.png`.
    static let mqPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mq", pathExtension: "png")
    /// Resource file `mr.png`.
    static let mrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mr", pathExtension: "png")
    /// Resource file `ms.png`.
    static let msPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ms", pathExtension: "png")
    /// Resource file `mt.png`.
    static let mtPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mt", pathExtension: "png")
    /// Resource file `mu.png`.
    static let muPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mu", pathExtension: "png")
    /// Resource file `mv.png`.
    static let mvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mv", pathExtension: "png")
    /// Resource file `mw.png`.
    static let mwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mw", pathExtension: "png")
    /// Resource file `mx.png`.
    static let mxPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mx", pathExtension: "png")
    /// Resource file `my.png`.
    static let myPng = Rswift.FileResource(bundle: R.hostingBundle, name: "my", pathExtension: "png")
    /// Resource file `mz.png`.
    static let mzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "mz", pathExtension: "png")
    /// Resource file `na.png`.
    static let naPng = Rswift.FileResource(bundle: R.hostingBundle, name: "na", pathExtension: "png")
    /// Resource file `nc.png`.
    static let ncPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nc", pathExtension: "png")
    /// Resource file `ne.png`.
    static let nePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ne", pathExtension: "png")
    /// Resource file `newLoader.json`.
    static let newLoaderJson = Rswift.FileResource(bundle: R.hostingBundle, name: "newLoader", pathExtension: "json")
    /// Resource file `nf.png`.
    static let nfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nf", pathExtension: "png")
    /// Resource file `ng.png`.
    static let ngPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ng", pathExtension: "png")
    /// Resource file `ni.png`.
    static let niPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ni", pathExtension: "png")
    /// Resource file `nl.png`.
    static let nlPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nl", pathExtension: "png")
    /// Resource file `no.png`.
    static let noPng = Rswift.FileResource(bundle: R.hostingBundle, name: "no", pathExtension: "png")
    /// Resource file `np.png`.
    static let npPng = Rswift.FileResource(bundle: R.hostingBundle, name: "np", pathExtension: "png")
    /// Resource file `nr.png`.
    static let nrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nr", pathExtension: "png")
    /// Resource file `nu.png`.
    static let nuPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nu", pathExtension: "png")
    /// Resource file `nz.png`.
    static let nzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "nz", pathExtension: "png")
    /// Resource file `om.png`.
    static let omPng = Rswift.FileResource(bundle: R.hostingBundle, name: "om", pathExtension: "png")
    /// Resource file `pa.png`.
    static let paPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pa", pathExtension: "png")
    /// Resource file `pe.png`.
    static let pePng = Rswift.FileResource(bundle: R.hostingBundle, name: "pe", pathExtension: "png")
    /// Resource file `pf.png`.
    static let pfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pf", pathExtension: "png")
    /// Resource file `pg.png`.
    static let pgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pg", pathExtension: "png")
    /// Resource file `ph.png`.
    static let phPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ph", pathExtension: "png")
    /// Resource file `pk.png`.
    static let pkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pk", pathExtension: "png")
    /// Resource file `pl.png`.
    static let plPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pl", pathExtension: "png")
    /// Resource file `pm.png`.
    static let pmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pm", pathExtension: "png")
    /// Resource file `pn.png`.
    static let pnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pn", pathExtension: "png")
    /// Resource file `pr.png`.
    static let prPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pr", pathExtension: "png")
    /// Resource file `ps.png`.
    static let psPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ps", pathExtension: "png")
    /// Resource file `pt.png`.
    static let ptPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pt", pathExtension: "png")
    /// Resource file `pw.png`.
    static let pwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "pw", pathExtension: "png")
    /// Resource file `py.png`.
    static let pyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "py", pathExtension: "png")
    /// Resource file `qa.png`.
    static let qaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "qa", pathExtension: "png")
    /// Resource file `re.png`.
    static let rePng = Rswift.FileResource(bundle: R.hostingBundle, name: "re", pathExtension: "png")
    /// Resource file `ro.png`.
    static let roPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ro", pathExtension: "png")
    /// Resource file `rs.png`.
    static let rsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "rs", pathExtension: "png")
    /// Resource file `ru.png`.
    static let ruPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ru", pathExtension: "png")
    /// Resource file `rw.png`.
    static let rwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "rw", pathExtension: "png")
    /// Resource file `sa.png`.
    static let saPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sa", pathExtension: "png")
    /// Resource file `sb.png`.
    static let sbPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sb", pathExtension: "png")
    /// Resource file `sc.png`.
    static let scPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sc", pathExtension: "png")
    /// Resource file `sd.png`.
    static let sdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sd", pathExtension: "png")
    /// Resource file `se.png`.
    static let sePng = Rswift.FileResource(bundle: R.hostingBundle, name: "se", pathExtension: "png")
    /// Resource file `sf-ui-display-black-58646a6b80d5a.otf`.
    static let sfUiDisplayBlack58646a6b80d5aOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-black-58646a6b80d5a", pathExtension: "otf")
    /// Resource file `sf-ui-display-bold-58646a511e3d9.otf`.
    static let sfUiDisplayBold58646a511e3d9Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-bold-58646a511e3d9", pathExtension: "otf")
    /// Resource file `sf-ui-display-heavy-586470160b9e5.otf`.
    static let sfUiDisplayHeavy586470160b9e5Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-heavy-586470160b9e5", pathExtension: "otf")
    /// Resource file `sf-ui-display-light-58646b33e0551.otf`.
    static let sfUiDisplayLight58646b33e0551Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-light-58646b33e0551", pathExtension: "otf")
    /// Resource file `sf-ui-display-medium-58646be638f96.otf`.
    static let sfUiDisplayMedium58646be638f96Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-medium-58646be638f96", pathExtension: "otf")
    /// Resource file `sf-ui-display-semibold-58646eddcae92.otf`.
    static let sfUiDisplaySemibold58646eddcae92Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-semibold-58646eddcae92", pathExtension: "otf")
    /// Resource file `sf-ui-display-thin-58646e9b26e8b.otf`.
    static let sfUiDisplayThin58646e9b26e8bOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-thin-58646e9b26e8b", pathExtension: "otf")
    /// Resource file `sf-ui-display-ultralight-58646b19bf205.otf`.
    static let sfUiDisplayUltralight58646b19bf205Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-ultralight-58646b19bf205", pathExtension: "otf")
    /// Resource file `sg.png`.
    static let sgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sg", pathExtension: "png")
    /// Resource file `sh.png`.
    static let shPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sh", pathExtension: "png")
    /// Resource file `si.png`.
    static let siPng = Rswift.FileResource(bundle: R.hostingBundle, name: "si", pathExtension: "png")
    /// Resource file `sj.png`.
    static let sjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sj", pathExtension: "png")
    /// Resource file `sk.png`.
    static let skPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sk", pathExtension: "png")
    /// Resource file `sl.png`.
    static let slPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sl", pathExtension: "png")
    /// Resource file `sm.png`.
    static let smPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sm", pathExtension: "png")
    /// Resource file `sn.png`.
    static let snPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sn", pathExtension: "png")
    /// Resource file `so.png`.
    static let soPng = Rswift.FileResource(bundle: R.hostingBundle, name: "so", pathExtension: "png")
    /// Resource file `sr.png`.
    static let srPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sr", pathExtension: "png")
    /// Resource file `ss.png`.
    static let ssPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ss", pathExtension: "png")
    /// Resource file `st.png`.
    static let stPng = Rswift.FileResource(bundle: R.hostingBundle, name: "st", pathExtension: "png")
    /// Resource file `sv.png`.
    static let svPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sv", pathExtension: "png")
    /// Resource file `sx.png`.
    static let sxPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sx", pathExtension: "png")
    /// Resource file `sy.png`.
    static let syPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sy", pathExtension: "png")
    /// Resource file `sz.png`.
    static let szPng = Rswift.FileResource(bundle: R.hostingBundle, name: "sz", pathExtension: "png")
    /// Resource file `tc.png`.
    static let tcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tc", pathExtension: "png")
    /// Resource file `td.png`.
    static let tdPng = Rswift.FileResource(bundle: R.hostingBundle, name: "td", pathExtension: "png")
    /// Resource file `tf.png`.
    static let tfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tf", pathExtension: "png")
    /// Resource file `tg.png`.
    static let tgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tg", pathExtension: "png")
    /// Resource file `th.png`.
    static let thPng = Rswift.FileResource(bundle: R.hostingBundle, name: "th", pathExtension: "png")
    /// Resource file `tj.png`.
    static let tjPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tj", pathExtension: "png")
    /// Resource file `tk.png`.
    static let tkPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tk", pathExtension: "png")
    /// Resource file `tl.png`.
    static let tlPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tl", pathExtension: "png")
    /// Resource file `tm.png`.
    static let tmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tm", pathExtension: "png")
    /// Resource file `tn.png`.
    static let tnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tn", pathExtension: "png")
    /// Resource file `to.png`.
    static let toPng = Rswift.FileResource(bundle: R.hostingBundle, name: "to", pathExtension: "png")
    /// Resource file `tr.png`.
    static let trPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tr", pathExtension: "png")
    /// Resource file `tt.png`.
    static let ttPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tt", pathExtension: "png")
    /// Resource file `tv.png`.
    static let tvPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tv", pathExtension: "png")
    /// Resource file `tw.png`.
    static let twPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tw", pathExtension: "png")
    /// Resource file `tz.png`.
    static let tzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tz", pathExtension: "png")
    /// Resource file `ua.png`.
    static let uaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ua", pathExtension: "png")
    /// Resource file `ug.png`.
    static let ugPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ug", pathExtension: "png")
    /// Resource file `um.png`.
    static let umPng = Rswift.FileResource(bundle: R.hostingBundle, name: "um", pathExtension: "png")
    /// Resource file `us.png`.
    static let usPng = Rswift.FileResource(bundle: R.hostingBundle, name: "us", pathExtension: "png")
    /// Resource file `uy.png`.
    static let uyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "uy", pathExtension: "png")
    /// Resource file `uz.png`.
    static let uzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "uz", pathExtension: "png")
    /// Resource file `va.png`.
    static let vaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "va", pathExtension: "png")
    /// Resource file `vc.png`.
    static let vcPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vc", pathExtension: "png")
    /// Resource file `ve.png`.
    static let vePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ve", pathExtension: "png")
    /// Resource file `vg.png`.
    static let vgPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vg", pathExtension: "png")
    /// Resource file `vi.png`.
    static let viPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vi", pathExtension: "png")
    /// Resource file `vn.png`.
    static let vnPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vn", pathExtension: "png")
    /// Resource file `vu.png`.
    static let vuPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vu", pathExtension: "png")
    /// Resource file `wf.png`.
    static let wfPng = Rswift.FileResource(bundle: R.hostingBundle, name: "wf", pathExtension: "png")
    /// Resource file `ws.png`.
    static let wsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ws", pathExtension: "png")
    /// Resource file `ye.png`.
    static let yePng = Rswift.FileResource(bundle: R.hostingBundle, name: "ye", pathExtension: "png")
    /// Resource file `yt.png`.
    static let ytPng = Rswift.FileResource(bundle: R.hostingBundle, name: "yt", pathExtension: "png")
    /// Resource file `za.png`.
    static let zaPng = Rswift.FileResource(bundle: R.hostingBundle, name: "za", pathExtension: "png")
    /// Resource file `zm.png`.
    static let zmPng = Rswift.FileResource(bundle: R.hostingBundle, name: "zm", pathExtension: "png")
    /// Resource file `zw.png`.
    static let zwPng = Rswift.FileResource(bundle: R.hostingBundle, name: "zw", pathExtension: "png")
    /// Resource file `zz.png`.
    static let zzPng = Rswift.FileResource(bundle: R.hostingBundle, name: "zz", pathExtension: "png")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Black", withExtension: "ttf")`
    static func montserratBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Bold", withExtension: "ttf")`
    static func montserratBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-BoldItalic", withExtension: "ttf")`
    static func montserratBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraBold", withExtension: "ttf")`
    static func montserratExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraBoldItalic", withExtension: "ttf")`
    static func montserratExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraLight", withExtension: "ttf")`
    static func montserratExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraLightItalic", withExtension: "ttf")`
    static func montserratExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Italic", withExtension: "ttf")`
    static func montserratItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Light", withExtension: "ttf")`
    static func montserratLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-LightItalic", withExtension: "ttf")`
    static func montserratLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Medium", withExtension: "ttf")`
    static func montserratMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-MediumItalic", withExtension: "ttf")`
    static func montserratMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Regular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-SemiBold", withExtension: "ttf")`
    static func montserratSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-SemiBoldItalic", withExtension: "ttf")`
    static func montserratSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Thin", withExtension: "ttf")`
    static func montserratThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ThinItalic", withExtension: "ttf")`
    static func montserratThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay", withExtension: "ttf")`
    static func sfProDisplayTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ad", withExtension: "png")`
    static func adPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ae", withExtension: "png")`
    static func aePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "af", withExtension: "png")`
    static func afPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.afPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ag", withExtension: "png")`
    static func agPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.agPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ai", withExtension: "png")`
    static func aiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "al", withExtension: "png")`
    static func alPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "am", withExtension: "png")`
    static func amPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.amPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ao", withExtension: "png")`
    static func aoPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aoPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "aq", withExtension: "png")`
    static func aqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ar", withExtension: "png")`
    static func arPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "as", withExtension: "png")`
    static func asPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.asPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "at", withExtension: "png")`
    static func atPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.atPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "au", withExtension: "png")`
    static func auPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.auPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "aw", withExtension: "png")`
    static func awPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ax", withExtension: "png")`
    static func axPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.axPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "az", withExtension: "png")`
    static func azPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.azPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ba", withExtension: "png")`
    static func baPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.baPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bb", withExtension: "png")`
    static func bbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bd", withExtension: "png")`
    static func bdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "be", withExtension: "png")`
    static func bePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bf", withExtension: "png")`
    static func bfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bg", withExtension: "png")`
    static func bgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bh", withExtension: "png")`
    static func bhPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bhPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bi", withExtension: "png")`
    static func biPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.biPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bj", withExtension: "png")`
    static func bjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bl", withExtension: "png")`
    static func blPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bm", withExtension: "png")`
    static func bmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bn", withExtension: "png")`
    static func bnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bo", withExtension: "png")`
    static func boPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.boPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bq", withExtension: "png")`
    static func bqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "br", withExtension: "png")`
    static func brPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bs", withExtension: "png")`
    static func bsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bt", withExtension: "png")`
    static func btPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.btPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bv", withExtension: "png")`
    static func bvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bw", withExtension: "png")`
    static func bwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "by", withExtension: "png")`
    static func byPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.byPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bz", withExtension: "png")`
    static func bzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ca", withExtension: "png")`
    static func caPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.caPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cc", withExtension: "png")`
    static func ccPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ccPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cd", withExtension: "png")`
    static func cdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cf", withExtension: "png")`
    static func cfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cg", withExtension: "png")`
    static func cgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ch", withExtension: "png")`
    static func chPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci", withExtension: "png")`
    static func ciPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ck", withExtension: "png")`
    static func ckPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ckPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cl", withExtension: "png")`
    static func clPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.clPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cm", withExtension: "png")`
    static func cmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cn", withExtension: "png")`
    static func cnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "co", withExtension: "png")`
    static func coPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cr", withExtension: "png")`
    static func crPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.crPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cu", withExtension: "png")`
    static func cuPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cuPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cv", withExtension: "png")`
    static func cvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cw", withExtension: "png")`
    static func cwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cx", withExtension: "png")`
    static func cxPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cxPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cy", withExtension: "png")`
    static func cyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cz", withExtension: "png")`
    static func czPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.czPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "de", withExtension: "png")`
    static func dePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dj", withExtension: "png")`
    static func djPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.djPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dk", withExtension: "png")`
    static func dkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dm", withExtension: "png")`
    static func dmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "do", withExtension: "png")`
    static func doPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dz", withExtension: "png")`
    static func dzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ec", withExtension: "png")`
    static func ecPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ecPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ee", withExtension: "png")`
    static func eePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "eg", withExtension: "png")`
    static func egPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.egPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "eh", withExtension: "png")`
    static func ehPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ehPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "er", withExtension: "png")`
    static func erPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.erPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "es", withExtension: "png")`
    static func esPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.esPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "et", withExtension: "png")`
    static func etPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.etPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fi", withExtension: "png")`
    static func fiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fj", withExtension: "png")`
    static func fjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fk", withExtension: "png")`
    static func fkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fm", withExtension: "png")`
    static func fmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fo", withExtension: "png")`
    static func foPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.foPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "fr", withExtension: "png")`
    static func frPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.frPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ga", withExtension: "png")`
    static func gaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gb", withExtension: "png")`
    static func gbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gd", withExtension: "png")`
    static func gdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ge", withExtension: "png")`
    static func gePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gf", withExtension: "png")`
    static func gfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gg", withExtension: "png")`
    static func ggPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ggPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gh", withExtension: "png")`
    static func ghPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ghPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gi", withExtension: "png")`
    static func giPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.giPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gl", withExtension: "png")`
    static func glPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.glPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gm", withExtension: "png")`
    static func gmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gn", withExtension: "png")`
    static func gnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gp", withExtension: "png")`
    static func gpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gq", withExtension: "png")`
    static func gqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gr", withExtension: "png")`
    static func grPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.grPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gs", withExtension: "png")`
    static func gsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gt", withExtension: "png")`
    static func gtPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gtPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gu", withExtension: "png")`
    static func guPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gw", withExtension: "png")`
    static func gwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "gy", withExtension: "png")`
    static func gyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hk", withExtension: "png")`
    static func hkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hm", withExtension: "png")`
    static func hmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hn", withExtension: "png")`
    static func hnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hr", withExtension: "png")`
    static func hrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ht", withExtension: "png")`
    static func htPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.htPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hu", withExtension: "png")`
    static func huPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.huPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "id", withExtension: "png")`
    static func idPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.idPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ie", withExtension: "png")`
    static func iePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "il", withExtension: "png")`
    static func ilPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ilPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "im", withExtension: "png")`
    static func imPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.imPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "in", withExtension: "png")`
    static func inPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "io", withExtension: "png")`
    static func ioPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ioPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "iq", withExtension: "png")`
    static func iqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ir", withExtension: "png")`
    static func irPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.irPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "is", withExtension: "png")`
    static func isPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.isPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "it", withExtension: "png")`
    static func itPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.itPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "je", withExtension: "png")`
    static func jePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "jm", withExtension: "png")`
    static func jmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "jo", withExtension: "png")`
    static func joPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.joPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "jp", withExtension: "png")`
    static func jpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ke", withExtension: "png")`
    static func kePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kg", withExtension: "png")`
    static func kgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kh", withExtension: "png")`
    static func khPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.khPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ki", withExtension: "png")`
    static func kiPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kiPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "km", withExtension: "png")`
    static func kmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kn", withExtension: "png")`
    static func knPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.knPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kp", withExtension: "png")`
    static func kpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kr", withExtension: "png")`
    static func krPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.krPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kw", withExtension: "png")`
    static func kwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ky", withExtension: "png")`
    static func kyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "kz", withExtension: "png")`
    static func kzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "la", withExtension: "png")`
    static func laPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.laPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lb", withExtension: "png")`
    static func lbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lc", withExtension: "png")`
    static func lcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "li", withExtension: "png")`
    static func liPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.liPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lk", withExtension: "png")`
    static func lkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loader_animation", withExtension: "json")`
    static func loader_animationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loader_animationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lr", withExtension: "png")`
    static func lrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ls", withExtension: "png")`
    static func lsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lt", withExtension: "png")`
    static func ltPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ltPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lu", withExtension: "png")`
    static func luPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.luPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lv", withExtension: "png")`
    static func lvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ly", withExtension: "png")`
    static func lyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ma", withExtension: "png")`
    static func maPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.maPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mc", withExtension: "png")`
    static func mcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "md", withExtension: "png")`
    static func mdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "me", withExtension: "png")`
    static func mePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mexApp_Loader", withExtension: "json")`
    static func mexApp_LoaderJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mexApp_LoaderJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mf", withExtension: "png")`
    static func mfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mg", withExtension: "png")`
    static func mgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mh", withExtension: "png")`
    static func mhPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mhPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mk", withExtension: "png")`
    static func mkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ml", withExtension: "png")`
    static func mlPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mlPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mm", withExtension: "png")`
    static func mmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mn", withExtension: "png")`
    static func mnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mo", withExtension: "png")`
    static func moPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mp", withExtension: "png")`
    static func mpPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mpPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mq", withExtension: "png")`
    static func mqPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mqPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mr", withExtension: "png")`
    static func mrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ms", withExtension: "png")`
    static func msPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.msPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mt", withExtension: "png")`
    static func mtPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mtPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mu", withExtension: "png")`
    static func muPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.muPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mv", withExtension: "png")`
    static func mvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mw", withExtension: "png")`
    static func mwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mx", withExtension: "png")`
    static func mxPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mxPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "my", withExtension: "png")`
    static func myPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.myPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mz", withExtension: "png")`
    static func mzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "na", withExtension: "png")`
    static func naPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.naPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nc", withExtension: "png")`
    static func ncPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ncPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ne", withExtension: "png")`
    static func nePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "newLoader", withExtension: "json")`
    static func newLoaderJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.newLoaderJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nf", withExtension: "png")`
    static func nfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ng", withExtension: "png")`
    static func ngPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ngPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ni", withExtension: "png")`
    static func niPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.niPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nl", withExtension: "png")`
    static func nlPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nlPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "no", withExtension: "png")`
    static func noPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.noPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "np", withExtension: "png")`
    static func npPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.npPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nr", withExtension: "png")`
    static func nrPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nrPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nu", withExtension: "png")`
    static func nuPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nuPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nz", withExtension: "png")`
    static func nzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "om", withExtension: "png")`
    static func omPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.omPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pa", withExtension: "png")`
    static func paPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.paPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pe", withExtension: "png")`
    static func pePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pf", withExtension: "png")`
    static func pfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pg", withExtension: "png")`
    static func pgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ph", withExtension: "png")`
    static func phPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.phPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pk", withExtension: "png")`
    static func pkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pl", withExtension: "png")`
    static func plPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pm", withExtension: "png")`
    static func pmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pn", withExtension: "png")`
    static func pnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pr", withExtension: "png")`
    static func prPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.prPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ps", withExtension: "png")`
    static func psPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.psPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pt", withExtension: "png")`
    static func ptPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ptPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pw", withExtension: "png")`
    static func pwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "py", withExtension: "png")`
    static func pyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "qa", withExtension: "png")`
    static func qaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "re", withExtension: "png")`
    static func rePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ro", withExtension: "png")`
    static func roPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.roPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rs", withExtension: "png")`
    static func rsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ru", withExtension: "png")`
    static func ruPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ruPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rw", withExtension: "png")`
    static func rwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sa", withExtension: "png")`
    static func saPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.saPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sb", withExtension: "png")`
    static func sbPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sbPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sc", withExtension: "png")`
    static func scPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sd", withExtension: "png")`
    static func sdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "se", withExtension: "png")`
    static func sePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-black-58646a6b80d5a", withExtension: "otf")`
    static func sfUiDisplayBlack58646a6b80d5aOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayBlack58646a6b80d5aOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-bold-58646a511e3d9", withExtension: "otf")`
    static func sfUiDisplayBold58646a511e3d9Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayBold58646a511e3d9Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-heavy-586470160b9e5", withExtension: "otf")`
    static func sfUiDisplayHeavy586470160b9e5Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayHeavy586470160b9e5Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-light-58646b33e0551", withExtension: "otf")`
    static func sfUiDisplayLight58646b33e0551Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayLight58646b33e0551Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-medium-58646be638f96", withExtension: "otf")`
    static func sfUiDisplayMedium58646be638f96Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayMedium58646be638f96Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-semibold-58646eddcae92", withExtension: "otf")`
    static func sfUiDisplaySemibold58646eddcae92Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplaySemibold58646eddcae92Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-thin-58646e9b26e8b", withExtension: "otf")`
    static func sfUiDisplayThin58646e9b26e8bOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayThin58646e9b26e8bOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-ultralight-58646b19bf205", withExtension: "otf")`
    static func sfUiDisplayUltralight58646b19bf205Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayUltralight58646b19bf205Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sg", withExtension: "png")`
    static func sgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sh", withExtension: "png")`
    static func shPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "si", withExtension: "png")`
    static func siPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.siPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sj", withExtension: "png")`
    static func sjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sk", withExtension: "png")`
    static func skPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.skPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sl", withExtension: "png")`
    static func slPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.slPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sm", withExtension: "png")`
    static func smPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sn", withExtension: "png")`
    static func snPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "so", withExtension: "png")`
    static func soPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.soPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sr", withExtension: "png")`
    static func srPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.srPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ss", withExtension: "png")`
    static func ssPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ssPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "st", withExtension: "png")`
    static func stPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sv", withExtension: "png")`
    static func svPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.svPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sx", withExtension: "png")`
    static func sxPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sxPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sy", withExtension: "png")`
    static func syPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.syPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sz", withExtension: "png")`
    static func szPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.szPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tc", withExtension: "png")`
    static func tcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "td", withExtension: "png")`
    static func tdPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tdPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tf", withExtension: "png")`
    static func tfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tg", withExtension: "png")`
    static func tgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "th", withExtension: "png")`
    static func thPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tj", withExtension: "png")`
    static func tjPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tjPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tk", withExtension: "png")`
    static func tkPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tkPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tl", withExtension: "png")`
    static func tlPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tlPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tm", withExtension: "png")`
    static func tmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tn", withExtension: "png")`
    static func tnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "to", withExtension: "png")`
    static func toPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tr", withExtension: "png")`
    static func trPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.trPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tt", withExtension: "png")`
    static func ttPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ttPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tv", withExtension: "png")`
    static func tvPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tvPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tw", withExtension: "png")`
    static func twPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.twPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tz", withExtension: "png")`
    static func tzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ua", withExtension: "png")`
    static func uaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ug", withExtension: "png")`
    static func ugPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ugPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "um", withExtension: "png")`
    static func umPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.umPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "us", withExtension: "png")`
    static func usPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.usPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "uy", withExtension: "png")`
    static func uyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uyPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "uz", withExtension: "png")`
    static func uzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "va", withExtension: "png")`
    static func vaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vc", withExtension: "png")`
    static func vcPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vcPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ve", withExtension: "png")`
    static func vePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vg", withExtension: "png")`
    static func vgPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vgPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vi", withExtension: "png")`
    static func viPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.viPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vn", withExtension: "png")`
    static func vnPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vnPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "vu", withExtension: "png")`
    static func vuPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vuPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wf", withExtension: "png")`
    static func wfPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wfPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ws", withExtension: "png")`
    static func wsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ye", withExtension: "png")`
    static func yePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "yt", withExtension: "png")`
    static func ytPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ytPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "za", withExtension: "png")`
    static func zaPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zaPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zm", withExtension: "png")`
    static func zmPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zmPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zw", withExtension: "png")`
    static func zwPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zwPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zz", withExtension: "png")`
    static func zzPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zzPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 26 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Black`.
    static let montserratBlack = Rswift.FontResource(fontName: "Montserrat-Black")
    /// Font `Montserrat-BoldItalic`.
    static let montserratBoldItalic = Rswift.FontResource(fontName: "Montserrat-BoldItalic")
    /// Font `Montserrat-Bold`.
    static let montserratBold = Rswift.FontResource(fontName: "Montserrat-Bold")
    /// Font `Montserrat-ExtraBoldItalic`.
    static let montserratExtraBoldItalic = Rswift.FontResource(fontName: "Montserrat-ExtraBoldItalic")
    /// Font `Montserrat-ExtraBold`.
    static let montserratExtraBold = Rswift.FontResource(fontName: "Montserrat-ExtraBold")
    /// Font `Montserrat-ExtraLightItalic`.
    static let montserratExtraLightItalic = Rswift.FontResource(fontName: "Montserrat-ExtraLightItalic")
    /// Font `Montserrat-ExtraLight`.
    static let montserratExtraLight = Rswift.FontResource(fontName: "Montserrat-ExtraLight")
    /// Font `Montserrat-Italic`.
    static let montserratItalic = Rswift.FontResource(fontName: "Montserrat-Italic")
    /// Font `Montserrat-LightItalic`.
    static let montserratLightItalic = Rswift.FontResource(fontName: "Montserrat-LightItalic")
    /// Font `Montserrat-Light`.
    static let montserratLight = Rswift.FontResource(fontName: "Montserrat-Light")
    /// Font `Montserrat-MediumItalic`.
    static let montserratMediumItalic = Rswift.FontResource(fontName: "Montserrat-MediumItalic")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    /// Font `Montserrat-SemiBoldItalic`.
    static let montserratSemiBoldItalic = Rswift.FontResource(fontName: "Montserrat-SemiBoldItalic")
    /// Font `Montserrat-SemiBold`.
    static let montserratSemiBold = Rswift.FontResource(fontName: "Montserrat-SemiBold")
    /// Font `Montserrat-ThinItalic`.
    static let montserratThinItalic = Rswift.FontResource(fontName: "Montserrat-ThinItalic")
    /// Font `Montserrat-Thin`.
    static let montserratThin = Rswift.FontResource(fontName: "Montserrat-Thin")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFUIDisplay-Black`.
    static let sfuiDisplayBlack = Rswift.FontResource(fontName: "SFUIDisplay-Black")
    /// Font `SFUIDisplay-Bold`.
    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Heavy`.
    static let sfuiDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Semibold`.
    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIDisplay-Thin`.
    static let sfuiDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
    /// Font `SFUIDisplay-Ultralight`.
    static let sfuiDisplayUltralight = Rswift.FontResource(fontName: "SFUIDisplay-Ultralight")

    /// `UIFont(name: "Montserrat-Black", size: ...)`
    static func montserratBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBlack, size: size)
    }

    /// `UIFont(name: "Montserrat-Bold", size: ...)`
    static func montserratBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBold, size: size)
    }

    /// `UIFont(name: "Montserrat-BoldItalic", size: ...)`
    static func montserratBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraBold", size: ...)`
    static func montserratExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraBold, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraBoldItalic", size: ...)`
    static func montserratExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraLight", size: ...)`
    static func montserratExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraLight, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraLightItalic", size: ...)`
    static func montserratExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Italic", size: ...)`
    static func montserratItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Light", size: ...)`
    static func montserratLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLight, size: size)
    }

    /// `UIFont(name: "Montserrat-LightItalic", size: ...)`
    static func montserratLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLightItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    /// `UIFont(name: "Montserrat-MediumItalic", size: ...)`
    static func montserratMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMediumItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBold", size: ...)`
    static func montserratSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBold, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBoldItalic", size: ...)`
    static func montserratSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Thin", size: ...)`
    static func montserratThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThin, size: size)
    }

    /// `UIFont(name: "Montserrat-ThinItalic", size: ...)`
    static func montserratThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThinItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Black", size: ...)`
    static func sfuiDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
    static func sfuiDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
    static func sfuiDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayThin, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Ultralight", size: ...)`
    static func sfuiDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayUltralight, size: size)
    }

    static func validate() throws {
      if R.font.montserratBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Black' could not be loaded, is 'Montserrat-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Bold' could not be loaded, is 'Montserrat-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-BoldItalic' could not be loaded, is 'Montserrat-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraBold' could not be loaded, is 'Montserrat-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraBoldItalic' could not be loaded, is 'Montserrat-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraLight' could not be loaded, is 'Montserrat-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraLightItalic' could not be loaded, is 'Montserrat-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Italic' could not be loaded, is 'Montserrat-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Light' could not be loaded, is 'Montserrat-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-LightItalic' could not be loaded, is 'Montserrat-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-MediumItalic' could not be loaded, is 'Montserrat-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBold' could not be loaded, is 'Montserrat-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBoldItalic' could not be loaded, is 'Montserrat-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Thin' could not be loaded, is 'Montserrat-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ThinItalic' could not be loaded, is 'Montserrat-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SFProDisplay.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Black' could not be loaded, is 'sf-ui-display-black-58646a6b80d5a.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'sf-ui-display-bold-58646a511e3d9.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'sf-ui-display-heavy-586470160b9e5.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'sf-ui-display-light-58646b33e0551.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'sf-ui-display-medium-58646be638f96.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'sf-ui-display-semibold-58646eddcae92.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'sf-ui-display-thin-58646e9b26e8b.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Ultralight' could not be loaded, is 'sf-ui-display-ultralight-58646b19bf205.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 410 images.
  struct image {
    /// Image `About-icon`.
    static let aboutIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "About-icon")
    /// Image `Arrow-left-back`.
    static let arrowLeftBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow-left-back")
    /// Image `Arrow-sidemenu-1`.
    static let arrowSidemenu1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow-sidemenu-1")
    /// Image `Arrow-sidemenu`.
    static let arrowSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrow-sidemenu")
    /// Image `Change-icon`.
    static let changeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Change-icon")
    /// Image `Cricle  login`.
    static let cricleLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cricle  login")
    /// Image `Future-icon-1`.
    static let futureIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Future-icon-1")
    /// Image `Haul-icon-1`.
    static let haulIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Haul-icon-1")
    /// Image `Home- icon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home- icon")
    /// Image `Junk removal`.
    static let junkRemoval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Junk removal")
    /// Image `Logout-icon`.
    static let logoutIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout-icon")
    /// Image `Loogout-icon`.
    static let loogoutIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Loogout-icon")
    /// Image `Notification-sidemenu-iocn.`.
    static let notificationSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification-sidemenu-iocn.")
    /// Image `Painting-icon`.
    static let paintingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Painting-icon")
    /// Image `Pay-bg`.
    static let payBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pay-bg")
    /// Image `Photo-icon-1`.
    static let photoIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photo-icon-1")
    /// Image `Pin-location`.
    static let pinLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pin-location")
    /// Image `Pin-men`.
    static let pinMen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pin-men")
    /// Image `Privacy-icon`.
    static let privacyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Privacy-icon")
    /// Image `Profile-icon-sidemenu`.
    static let profileIconSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile-icon-sidemenu")
    /// Image `Selected-icon-1`.
    static let selectedIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected-icon-1")
    /// Image `Selected-icon`.
    static let selectedIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selected-icon")
    /// Image `Stadnard-icomn-3`.
    static let stadnardIcomn3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stadnard-icomn-3")
    /// Image `Standard-icon`.
    static let standardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Standard-icon")
    /// Image `Today-icon-1`.
    static let todayIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Today-icon-1")
    /// Image `Tracking-upcomingscreen`.
    static let trackingUpcomingscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tracking-upcomingscreen")
    /// Image `about-sidemenu`.
    static let aboutSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "about-sidemenu")
    /// Image `aboutus-icon`.
    static let aboutusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutus-icon")
    /// Image `accept-icon-1`.
    static let acceptIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "accept-icon-1")
    /// Image `accept-icon`.
    static let acceptIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "accept-icon")
    /// Image `ad`.
    static let ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ad")
    /// Image `add-card-icon`.
    static let addCardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-card-icon")
    /// Image `add-fav-icon`.
    static let addFavIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-fav-icon")
    /// Image `add-favorite-icon`.
    static let addFavoriteIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-favorite-icon")
    /// Image `add-new-card-icon`.
    static let addNewCardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-new-card-icon")
    /// Image `add-work-icon`.
    static let addWorkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-work-icon")
    /// Image `add-work`.
    static let addWork = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-work")
    /// Image `ae`.
    static let ae = Rswift.ImageResource(bundle: R.hostingBundle, name: "ae")
    /// Image `af`.
    static let af = Rswift.ImageResource(bundle: R.hostingBundle, name: "af")
    /// Image `ag`.
    static let ag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ag")
    /// Image `ai`.
    static let ai = Rswift.ImageResource(bundle: R.hostingBundle, name: "ai")
    /// Image `air-conditioner`.
    static let airConditioner = Rswift.ImageResource(bundle: R.hostingBundle, name: "air-conditioner")
    /// Image `al`.
    static let al = Rswift.ImageResource(bundle: R.hostingBundle, name: "al")
    /// Image `am`.
    static let am = Rswift.ImageResource(bundle: R.hostingBundle, name: "am")
    /// Image `ao`.
    static let ao = Rswift.ImageResource(bundle: R.hostingBundle, name: "ao")
    /// Image `aq`.
    static let aq = Rswift.ImageResource(bundle: R.hostingBundle, name: "aq")
    /// Image `ar`.
    static let ar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ar")
    /// Image `art-1`.
    static let art1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "art-1")
    /// Image `art-2`.
    static let art2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "art-2")
    /// Image `art-3`.
    static let art3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "art-3")
    /// Image `as`.
    static let `as` = Rswift.ImageResource(bundle: R.hostingBundle, name: "as")
    /// Image `at`.
    static let at = Rswift.ImageResource(bundle: R.hostingBundle, name: "at")
    /// Image `au`.
    static let au = Rswift.ImageResource(bundle: R.hostingBundle, name: "au")
    /// Image `auto:boat`.
    static let autoBoat = Rswift.ImageResource(bundle: R.hostingBundle, name: "auto:boat")
    /// Image `aw`.
    static let aw = Rswift.ImageResource(bundle: R.hostingBundle, name: "aw")
    /// Image `ax`.
    static let ax = Rswift.ImageResource(bundle: R.hostingBundle, name: "ax")
    /// Image `az`.
    static let az = Rswift.ImageResource(bundle: R.hostingBundle, name: "az")
    /// Image `ba`.
    static let ba = Rswift.ImageResource(bundle: R.hostingBundle, name: "ba")
    /// Image `backArr`.
    static let backArr = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArr")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `background-search`.
    static let backgroundSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-search")
    /// Image `background-slected`.
    static let backgroundSlected = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-slected")
    /// Image `background-white`.
    static let backgroundWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-white")
    /// Image `bank-no-slected`.
    static let bankNoSlected = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank-no-slected")
    /// Image `bb`.
    static let bb = Rswift.ImageResource(bundle: R.hostingBundle, name: "bb")
    /// Image `bd`.
    static let bd = Rswift.ImageResource(bundle: R.hostingBundle, name: "bd")
    /// Image `be`.
    static let be = Rswift.ImageResource(bundle: R.hostingBundle, name: "be")
    /// Image `bf`.
    static let bf = Rswift.ImageResource(bundle: R.hostingBundle, name: "bf")
    /// Image `bg`.
    static let bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg")
    /// Image `bh`.
    static let bh = Rswift.ImageResource(bundle: R.hostingBundle, name: "bh")
    /// Image `bi`.
    static let bi = Rswift.ImageResource(bundle: R.hostingBundle, name: "bi")
    /// Image `bj`.
    static let bj = Rswift.ImageResource(bundle: R.hostingBundle, name: "bj")
    /// Image `bl`.
    static let bl = Rswift.ImageResource(bundle: R.hostingBundle, name: "bl")
    /// Image `blue-bg-home`.
    static let blueBgHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue-bg-home")
    /// Image `bm`.
    static let bm = Rswift.ImageResource(bundle: R.hostingBundle, name: "bm")
    /// Image `bn`.
    static let bn = Rswift.ImageResource(bundle: R.hostingBundle, name: "bn")
    /// Image `bo`.
    static let bo = Rswift.ImageResource(bundle: R.hostingBundle, name: "bo")
    /// Image `bq`.
    static let bq = Rswift.ImageResource(bundle: R.hostingBundle, name: "bq")
    /// Image `br`.
    static let br = Rswift.ImageResource(bundle: R.hostingBundle, name: "br")
    /// Image `bs`.
    static let bs = Rswift.ImageResource(bundle: R.hostingBundle, name: "bs")
    /// Image `bt`.
    static let bt = Rswift.ImageResource(bundle: R.hostingBundle, name: "bt")
    /// Image `bv`.
    static let bv = Rswift.ImageResource(bundle: R.hostingBundle, name: "bv")
    /// Image `bw`.
    static let bw = Rswift.ImageResource(bundle: R.hostingBundle, name: "bw")
    /// Image `by`.
    static let by = Rswift.ImageResource(bundle: R.hostingBundle, name: "by")
    /// Image `bz`.
    static let bz = Rswift.ImageResource(bundle: R.hostingBundle, name: "bz")
    /// Image `ca`.
    static let ca = Rswift.ImageResource(bundle: R.hostingBundle, name: "ca")
    /// Image `calendar-icon-1`.
    static let calendarIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar-icon-1")
    /// Image `calendar-icon`.
    static let calendarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar-icon")
    /// Image `call-icon-1`.
    static let callIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "call-icon-1")
    /// Image `call-icon`.
    static let callIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "call-icon")
    /// Image `camera-icon`.
    static let cameraIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-icon")
    /// Image `camera-small-icon`.
    static let cameraSmallIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-small-icon")
    /// Image `camera-upload-icon`.
    static let cameraUploadIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-upload-icon")
    /// Image `cancel-border`.
    static let cancelBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel-border")
    /// Image `cancel-icon`.
    static let cancelIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel-icon")
    /// Image `card-expiry-border`.
    static let cardExpiryBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "card-expiry-border")
    /// Image `card-expiry-dropdown`.
    static let cardExpiryDropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "card-expiry-dropdown")
    /// Image `card-option-cricle`.
    static let cardOptionCricle = Rswift.ImageResource(bundle: R.hostingBundle, name: "card-option-cricle")
    /// Image `cc`.
    static let cc = Rswift.ImageResource(bundle: R.hostingBundle, name: "cc")
    /// Image `cd`.
    static let cd = Rswift.ImageResource(bundle: R.hostingBundle, name: "cd")
    /// Image `cf`.
    static let cf = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf")
    /// Image `cg`.
    static let cg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cg")
    /// Image `ch`.
    static let ch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ch")
    /// Image `change-icon-1`.
    static let changeIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "change-icon-1")
    /// Image `change-sidemenu`.
    static let changeSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "change-sidemenu")
    /// Image `chat-bg-cricle`.
    static let chatBgCricle = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-bg-cricle")
    /// Image `chat-icon-gray`.
    static let chatIconGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat-icon-gray")
    /// Image `chats-sidemenu-iocn.`.
    static let chatsSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "chats-sidemenu-iocn.")
    /// Image `ci`.
    static let ci = Rswift.ImageResource(bundle: R.hostingBundle, name: "ci")
    /// Image `circle-dots-profie`.
    static let circleDotsProfie = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle-dots-profie")
    /// Image `circle-home`.
    static let circleHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle-home")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `cirlce-color`.
    static let cirlceColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "cirlce-color")
    /// Image `city-border`.
    static let cityBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "city-border")
    /// Image `ck`.
    static let ck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ck")
    /// Image `cl`.
    static let cl = Rswift.ImageResource(bundle: R.hostingBundle, name: "cl")
    /// Image `cm`.
    static let cm = Rswift.ImageResource(bundle: R.hostingBundle, name: "cm")
    /// Image `cn`.
    static let cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "cn")
    /// Image `co`.
    static let co = Rswift.ImageResource(bundle: R.hostingBundle, name: "co")
    /// Image `courior-taxi-icon`.
    static let couriorTaxiIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "courior-taxi-icon")
    /// Image `cr`.
    static let cr = Rswift.ImageResource(bundle: R.hostingBundle, name: "cr")
    /// Image `cu`.
    static let cu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cu")
    /// Image `cv`.
    static let cv = Rswift.ImageResource(bundle: R.hostingBundle, name: "cv")
    /// Image `cvv-icon`.
    static let cvvIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cvv-icon")
    /// Image `cw`.
    static let cw = Rswift.ImageResource(bundle: R.hostingBundle, name: "cw")
    /// Image `cx`.
    static let cx = Rswift.ImageResource(bundle: R.hostingBundle, name: "cx")
    /// Image `cy`.
    static let cy = Rswift.ImageResource(bundle: R.hostingBundle, name: "cy")
    /// Image `cz`.
    static let cz = Rswift.ImageResource(bundle: R.hostingBundle, name: "cz")
    /// Image `de`.
    static let de = Rswift.ImageResource(bundle: R.hostingBundle, name: "de")
    /// Image `decline-icon-1`.
    static let declineIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "decline-icon-1")
    /// Image `decline-icon`.
    static let declineIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "decline-icon")
    /// Image `decline-red`.
    static let declineRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "decline-red")
    /// Image `dj`.
    static let dj = Rswift.ImageResource(bundle: R.hostingBundle, name: "dj")
    /// Image `dk`.
    static let dk = Rswift.ImageResource(bundle: R.hostingBundle, name: "dk")
    /// Image `dm`.
    static let dm = Rswift.ImageResource(bundle: R.hostingBundle, name: "dm")
    /// Image `do`.
    static let `do` = Rswift.ImageResource(bundle: R.hostingBundle, name: "do")
    /// Image `dots-black`.
    static let dotsBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "dots-black")
    /// Image `dots.gray`.
    static let dotsGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "dots.gray")
    /// Image `down-arrow`.
    static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "down-arrow")
    /// Image `dz`.
    static let dz = Rswift.ImageResource(bundle: R.hostingBundle, name: "dz")
    /// Image `ec`.
    static let ec = Rswift.ImageResource(bundle: R.hostingBundle, name: "ec")
    /// Image `edit-profile-icon`.
    static let editProfileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-profile-icon")
    /// Image `edit-tools-icon`.
    static let editToolsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-tools-icon")
    /// Image `ee`.
    static let ee = Rswift.ImageResource(bundle: R.hostingBundle, name: "ee")
    /// Image `eg`.
    static let eg = Rswift.ImageResource(bundle: R.hostingBundle, name: "eg")
    /// Image `eh`.
    static let eh = Rswift.ImageResource(bundle: R.hostingBundle, name: "eh")
    /// Image `er`.
    static let er = Rswift.ImageResource(bundle: R.hostingBundle, name: "er")
    /// Image `es`.
    static let es = Rswift.ImageResource(bundle: R.hostingBundle, name: "es")
    /// Image `et`.
    static let et = Rswift.ImageResource(bundle: R.hostingBundle, name: "et")
    /// Image `facebook-icon`.
    static let facebookIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-icon")
    /// Image `favorite-footer`.
    static let favoriteFooter = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite-footer")
    /// Image `favorite-icon`.
    static let favoriteIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite-icon")
    /// Image `favorites-icon`.
    static let favoritesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorites-icon")
    /// Image `favortie-icon`.
    static let favortieIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "favortie-icon")
    /// Image `fi`.
    static let fi = Rswift.ImageResource(bundle: R.hostingBundle, name: "fi")
    /// Image `filter-icon`.
    static let filterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter-icon")
    /// Image `fj`.
    static let fj = Rswift.ImageResource(bundle: R.hostingBundle, name: "fj")
    /// Image `fk`.
    static let fk = Rswift.ImageResource(bundle: R.hostingBundle, name: "fk")
    /// Image `fm`.
    static let fm = Rswift.ImageResource(bundle: R.hostingBundle, name: "fm")
    /// Image `fo`.
    static let fo = Rswift.ImageResource(bundle: R.hostingBundle, name: "fo")
    /// Image `fr`.
    static let fr = Rswift.ImageResource(bundle: R.hostingBundle, name: "fr")
    /// Image `future-icon`.
    static let futureIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "future-icon")
    /// Image `ga`.
    static let ga = Rswift.ImageResource(bundle: R.hostingBundle, name: "ga")
    /// Image `gb`.
    static let gb = Rswift.ImageResource(bundle: R.hostingBundle, name: "gb")
    /// Image `gd`.
    static let gd = Rswift.ImageResource(bundle: R.hostingBundle, name: "gd")
    /// Image `ge`.
    static let ge = Rswift.ImageResource(bundle: R.hostingBundle, name: "ge")
    /// Image `gf`.
    static let gf = Rswift.ImageResource(bundle: R.hostingBundle, name: "gf")
    /// Image `gg`.
    static let gg = Rswift.ImageResource(bundle: R.hostingBundle, name: "gg")
    /// Image `gh`.
    static let gh = Rswift.ImageResource(bundle: R.hostingBundle, name: "gh")
    /// Image `gi`.
    static let gi = Rswift.ImageResource(bundle: R.hostingBundle, name: "gi")
    /// Image `gl`.
    static let gl = Rswift.ImageResource(bundle: R.hostingBundle, name: "gl")
    /// Image `gm`.
    static let gm = Rswift.ImageResource(bundle: R.hostingBundle, name: "gm")
    /// Image `gn`.
    static let gn = Rswift.ImageResource(bundle: R.hostingBundle, name: "gn")
    /// Image `google-plus-icon`.
    static let googlePlusIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "google-plus-icon")
    /// Image `gp`.
    static let gp = Rswift.ImageResource(bundle: R.hostingBundle, name: "gp")
    /// Image `gq`.
    static let gq = Rswift.ImageResource(bundle: R.hostingBundle, name: "gq")
    /// Image `gr`.
    static let gr = Rswift.ImageResource(bundle: R.hostingBundle, name: "gr")
    /// Image `gray-bg`.
    static let grayBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "gray-bg")
    /// Image `gs`.
    static let gs = Rswift.ImageResource(bundle: R.hostingBundle, name: "gs")
    /// Image `gt`.
    static let gt = Rswift.ImageResource(bundle: R.hostingBundle, name: "gt")
    /// Image `gu`.
    static let gu = Rswift.ImageResource(bundle: R.hostingBundle, name: "gu")
    /// Image `gw`.
    static let gw = Rswift.ImageResource(bundle: R.hostingBundle, name: "gw")
    /// Image `gy`.
    static let gy = Rswift.ImageResource(bundle: R.hostingBundle, name: "gy")
    /// Image `handyman-icon`.
    static let handymanIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "handyman-icon")
    /// Image `haul-icon`.
    static let haulIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "haul-icon")
    /// Image `help-sidemenu`.
    static let helpSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "help-sidemenu")
    /// Image `hk`.
    static let hk = Rswift.ImageResource(bundle: R.hostingBundle, name: "hk")
    /// Image `hm`.
    static let hm = Rswift.ImageResource(bundle: R.hostingBundle, name: "hm")
    /// Image `hn`.
    static let hn = Rswift.ImageResource(bundle: R.hostingBundle, name: "hn")
    /// Image `home-footer`.
    static let homeFooter = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-footer")
    /// Image `home-sidemenu-iocn`.
    static let homeSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-sidemenu-iocn")
    /// Image `hr`.
    static let hr = Rswift.ImageResource(bundle: R.hostingBundle, name: "hr")
    /// Image `ht`.
    static let ht = Rswift.ImageResource(bundle: R.hostingBundle, name: "ht")
    /// Image `hu`.
    static let hu = Rswift.ImageResource(bundle: R.hostingBundle, name: "hu")
    /// Image `id`.
    static let id = Rswift.ImageResource(bundle: R.hostingBundle, name: "id")
    /// Image `ie`.
    static let ie = Rswift.ImageResource(bundle: R.hostingBundle, name: "ie")
    /// Image `il`.
    static let il = Rswift.ImageResource(bundle: R.hostingBundle, name: "il")
    /// Image `im`.
    static let im = Rswift.ImageResource(bundle: R.hostingBundle, name: "im")
    /// Image `img`.
    static let img = Rswift.ImageResource(bundle: R.hostingBundle, name: "img")
    /// Image `in`.
    static let `in` = Rswift.ImageResource(bundle: R.hostingBundle, name: "in")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `io`.
    static let io = Rswift.ImageResource(bundle: R.hostingBundle, name: "io")
    /// Image `iq`.
    static let iq = Rswift.ImageResource(bundle: R.hostingBundle, name: "iq")
    /// Image `ir`.
    static let ir = Rswift.ImageResource(bundle: R.hostingBundle, name: "ir")
    /// Image `is`.
    static let `is` = Rswift.ImageResource(bundle: R.hostingBundle, name: "is")
    /// Image `it`.
    static let it = Rswift.ImageResource(bundle: R.hostingBundle, name: "it")
    /// Image `je`.
    static let je = Rswift.ImageResource(bundle: R.hostingBundle, name: "je")
    /// Image `jm`.
    static let jm = Rswift.ImageResource(bundle: R.hostingBundle, name: "jm")
    /// Image `jo`.
    static let jo = Rswift.ImageResource(bundle: R.hostingBundle, name: "jo")
    /// Image `job-sidemenu-iocn.`.
    static let jobSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "job-sidemenu-iocn.")
    /// Image `jp`.
    static let jp = Rswift.ImageResource(bundle: R.hostingBundle, name: "jp")
    /// Image `ke`.
    static let ke = Rswift.ImageResource(bundle: R.hostingBundle, name: "ke")
    /// Image `kg`.
    static let kg = Rswift.ImageResource(bundle: R.hostingBundle, name: "kg")
    /// Image `kh`.
    static let kh = Rswift.ImageResource(bundle: R.hostingBundle, name: "kh")
    /// Image `ki`.
    static let ki = Rswift.ImageResource(bundle: R.hostingBundle, name: "ki")
    /// Image `km`.
    static let km = Rswift.ImageResource(bundle: R.hostingBundle, name: "km")
    /// Image `kn`.
    static let kn = Rswift.ImageResource(bundle: R.hostingBundle, name: "kn")
    /// Image `kp`.
    static let kp = Rswift.ImageResource(bundle: R.hostingBundle, name: "kp")
    /// Image `kr`.
    static let kr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kr")
    /// Image `kw`.
    static let kw = Rswift.ImageResource(bundle: R.hostingBundle, name: "kw")
    /// Image `ky`.
    static let ky = Rswift.ImageResource(bundle: R.hostingBundle, name: "ky")
    /// Image `kz`.
    static let kz = Rswift.ImageResource(bundle: R.hostingBundle, name: "kz")
    /// Image `la`.
    static let la = Rswift.ImageResource(bundle: R.hostingBundle, name: "la")
    /// Image `lb`.
    static let lb = Rswift.ImageResource(bundle: R.hostingBundle, name: "lb")
    /// Image `lc`.
    static let lc = Rswift.ImageResource(bundle: R.hostingBundle, name: "lc")
    /// Image `li`.
    static let li = Rswift.ImageResource(bundle: R.hostingBundle, name: "li")
    /// Image `light-cricle-map`.
    static let lightCricleMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "light-cricle-map")
    /// Image `line-sidemenu`.
    static let lineSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "line-sidemenu")
    /// Image `list-footer-icon`.
    static let listFooterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "list-footer-icon")
    /// Image `list-icon-home`.
    static let listIconHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "list-icon-home")
    /// Image `lk`.
    static let lk = Rswift.ImageResource(bundle: R.hostingBundle, name: "lk")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logoout-sidemenu`.
    static let logooutSidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoout-sidemenu")
    /// Image `logout-sidemenu-iocn.`.
    static let logoutSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout-sidemenu-iocn.")
    /// Image `lr`.
    static let lr = Rswift.ImageResource(bundle: R.hostingBundle, name: "lr")
    /// Image `ls`.
    static let ls = Rswift.ImageResource(bundle: R.hostingBundle, name: "ls")
    /// Image `lt`.
    static let lt = Rswift.ImageResource(bundle: R.hostingBundle, name: "lt")
    /// Image `lu`.
    static let lu = Rswift.ImageResource(bundle: R.hostingBundle, name: "lu")
    /// Image `lv`.
    static let lv = Rswift.ImageResource(bundle: R.hostingBundle, name: "lv")
    /// Image `ly`.
    static let ly = Rswift.ImageResource(bundle: R.hostingBundle, name: "ly")
    /// Image `ma`.
    static let ma = Rswift.ImageResource(bundle: R.hostingBundle, name: "ma")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `marker-icon`.
    static let markerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "marker-icon")
    /// Image `marker`.
    static let marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "marker")
    /// Image `mc`.
    static let mc = Rswift.ImageResource(bundle: R.hostingBundle, name: "mc")
    /// Image `md`.
    static let md = Rswift.ImageResource(bundle: R.hostingBundle, name: "md")
    /// Image `me`.
    static let me = Rswift.ImageResource(bundle: R.hostingBundle, name: "me")
    /// Image `menu-icon-top`.
    static let menuIconTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-icon-top")
    /// Image `menu-icon`.
    static let menuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu-icon")
    /// Image `message-footer-icon`.
    static let messageFooterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "message-footer-icon")
    /// Image `message-icon`.
    static let messageIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "message-icon")
    /// Image `messge-search-icon`.
    static let messgeSearchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "messge-search-icon")
    /// Image `mf`.
    static let mf = Rswift.ImageResource(bundle: R.hostingBundle, name: "mf")
    /// Image `mg`.
    static let mg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mg")
    /// Image `mh`.
    static let mh = Rswift.ImageResource(bundle: R.hostingBundle, name: "mh")
    /// Image `mk`.
    static let mk = Rswift.ImageResource(bundle: R.hostingBundle, name: "mk")
    /// Image `ml`.
    static let ml = Rswift.ImageResource(bundle: R.hostingBundle, name: "ml")
    /// Image `mm`.
    static let mm = Rswift.ImageResource(bundle: R.hostingBundle, name: "mm")
    /// Image `mn`.
    static let mn = Rswift.ImageResource(bundle: R.hostingBundle, name: "mn")
    /// Image `mo`.
    static let mo = Rswift.ImageResource(bundle: R.hostingBundle, name: "mo")
    /// Image `mp`.
    static let mp = Rswift.ImageResource(bundle: R.hostingBundle, name: "mp")
    /// Image `mq`.
    static let mq = Rswift.ImageResource(bundle: R.hostingBundle, name: "mq")
    /// Image `mr`.
    static let mr = Rswift.ImageResource(bundle: R.hostingBundle, name: "mr")
    /// Image `ms`.
    static let ms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ms")
    /// Image `mt`.
    static let mt = Rswift.ImageResource(bundle: R.hostingBundle, name: "mt")
    /// Image `mu`.
    static let mu = Rswift.ImageResource(bundle: R.hostingBundle, name: "mu")
    /// Image `mv`.
    static let mv = Rswift.ImageResource(bundle: R.hostingBundle, name: "mv")
    /// Image `mw`.
    static let mw = Rswift.ImageResource(bundle: R.hostingBundle, name: "mw")
    /// Image `mx`.
    static let mx = Rswift.ImageResource(bundle: R.hostingBundle, name: "mx")
    /// Image `my`.
    static let my = Rswift.ImageResource(bundle: R.hostingBundle, name: "my")
    /// Image `mz`.
    static let mz = Rswift.ImageResource(bundle: R.hostingBundle, name: "mz")
    /// Image `na`.
    static let na = Rswift.ImageResource(bundle: R.hostingBundle, name: "na")
    /// Image `nc`.
    static let nc = Rswift.ImageResource(bundle: R.hostingBundle, name: "nc")
    /// Image `ne`.
    static let ne = Rswift.ImageResource(bundle: R.hostingBundle, name: "ne")
    /// Image `nearest-men`.
    static let nearestMen = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearest-men")
    /// Image `nf`.
    static let nf = Rswift.ImageResource(bundle: R.hostingBundle, name: "nf")
    /// Image `ng`.
    static let ng = Rswift.ImageResource(bundle: R.hostingBundle, name: "ng")
    /// Image `ni`.
    static let ni = Rswift.ImageResource(bundle: R.hostingBundle, name: "ni")
    /// Image `nl`.
    static let nl = Rswift.ImageResource(bundle: R.hostingBundle, name: "nl")
    /// Image `no`.
    static let no = Rswift.ImageResource(bundle: R.hostingBundle, name: "no")
    /// Image `notification-icon`.
    static let notificationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification-icon")
    /// Image `notification-top`.
    static let notificationTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification-top")
    /// Image `now-icon-1`.
    static let nowIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "now-icon-1")
    /// Image `now-icon`.
    static let nowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "now-icon")
    /// Image `np`.
    static let np = Rswift.ImageResource(bundle: R.hostingBundle, name: "np")
    /// Image `nr`.
    static let nr = Rswift.ImageResource(bundle: R.hostingBundle, name: "nr")
    /// Image `nu`.
    static let nu = Rswift.ImageResource(bundle: R.hostingBundle, name: "nu")
    /// Image `nz`.
    static let nz = Rswift.ImageResource(bundle: R.hostingBundle, name: "nz")
    /// Image `om`.
    static let om = Rswift.ImageResource(bundle: R.hostingBundle, name: "om")
    /// Image `other-icon`.
    static let otherIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "other-icon")
    /// Image `pa`.
    static let pa = Rswift.ImageResource(bundle: R.hostingBundle, name: "pa")
    /// Image `password-icon`.
    static let passwordIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "password-icon")
    /// Image `pe`.
    static let pe = Rswift.ImageResource(bundle: R.hostingBundle, name: "pe")
    /// Image `pet-care`.
    static let petCare = Rswift.ImageResource(bundle: R.hostingBundle, name: "pet-care")
    /// Image `pf`.
    static let pf = Rswift.ImageResource(bundle: R.hostingBundle, name: "pf")
    /// Image `pg`.
    static let pg = Rswift.ImageResource(bundle: R.hostingBundle, name: "pg")
    /// Image `ph`.
    static let ph = Rswift.ImageResource(bundle: R.hostingBundle, name: "ph")
    /// Image `photo-icon`.
    static let photoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo-icon")
    /// Image `pk`.
    static let pk = Rswift.ImageResource(bundle: R.hostingBundle, name: "pk")
    /// Image `pl`.
    static let pl = Rswift.ImageResource(bundle: R.hostingBundle, name: "pl")
    /// Image `place-bid-bg`.
    static let placeBidBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "place-bid-bg")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `pm`.
    static let pm = Rswift.ImageResource(bundle: R.hostingBundle, name: "pm")
    /// Image `pn`.
    static let pn = Rswift.ImageResource(bundle: R.hostingBundle, name: "pn")
    /// Image `poly`.
    static let poly = Rswift.ImageResource(bundle: R.hostingBundle, name: "poly")
    /// Image `pr`.
    static let pr = Rswift.ImageResource(bundle: R.hostingBundle, name: "pr")
    /// Image `privacy-icon-1`.
    static let privacyIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy-icon-1")
    /// Image `privacy-sidemenu`.
    static let privacySidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy-sidemenu")
    /// Image `ps`.
    static let ps = Rswift.ImageResource(bundle: R.hostingBundle, name: "ps")
    /// Image `pt`.
    static let pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "pt")
    /// Image `pw`.
    static let pw = Rswift.ImageResource(bundle: R.hostingBundle, name: "pw")
    /// Image `py`.
    static let py = Rswift.ImageResource(bundle: R.hostingBundle, name: "py")
    /// Image `qa`.
    static let qa = Rswift.ImageResource(bundle: R.hostingBundle, name: "qa")
    /// Image `radio`.
    static let radio = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio")
    /// Image `re`.
    static let re = Rswift.ImageResource(bundle: R.hostingBundle, name: "re")
    /// Image `remember-icon`.
    static let rememberIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "remember-icon")
    /// Image `reviews-sidemenu-iocn.`.
    static let reviewsSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "reviews-sidemenu-iocn.")
    /// Image `ro`.
    static let ro = Rswift.ImageResource(bundle: R.hostingBundle, name: "ro")
    /// Image `rs`.
    static let rs = Rswift.ImageResource(bundle: R.hostingBundle, name: "rs")
    /// Image `ru`.
    static let ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "ru")
    /// Image `rw`.
    static let rw = Rswift.ImageResource(bundle: R.hostingBundle, name: "rw")
    /// Image `sa`.
    static let sa = Rswift.ImageResource(bundle: R.hostingBundle, name: "sa")
    /// Image `sb`.
    static let sb = Rswift.ImageResource(bundle: R.hostingBundle, name: "sb")
    /// Image `sc`.
    static let sc = Rswift.ImageResource(bundle: R.hostingBundle, name: "sc")
    /// Image `sd`.
    static let sd = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd")
    /// Image `se`.
    static let se = Rswift.ImageResource(bundle: R.hostingBundle, name: "se")
    /// Image `search-icon`.
    static let searchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "search-icon")
    /// Image `seetings-sidemenu-iocn.`.
    static let seetingsSidemenuIocn = Rswift.ImageResource(bundle: R.hostingBundle, name: "seetings-sidemenu-iocn.")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `setting-icon`.
    static let settingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting-icon")
    /// Image `settings-footer`.
    static let settingsFooter = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-footer")
    /// Image `sg`.
    static let sg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sg")
    /// Image `sh`.
    static let sh = Rswift.ImageResource(bundle: R.hostingBundle, name: "sh")
    /// Image `sharpCut`.
    static let sharpCut = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharpCut")
    /// Image `si`.
    static let si = Rswift.ImageResource(bundle: R.hostingBundle, name: "si")
    /// Image `sideArrow`.
    static let sideArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "sideArrow")
    /// Image `sj`.
    static let sj = Rswift.ImageResource(bundle: R.hostingBundle, name: "sj")
    /// Image `sk`.
    static let sk = Rswift.ImageResource(bundle: R.hostingBundle, name: "sk")
    /// Image `sl`.
    static let sl = Rswift.ImageResource(bundle: R.hostingBundle, name: "sl")
    /// Image `sm`.
    static let sm = Rswift.ImageResource(bundle: R.hostingBundle, name: "sm")
    /// Image `sn`.
    static let sn = Rswift.ImageResource(bundle: R.hostingBundle, name: "sn")
    /// Image `so`.
    static let so = Rswift.ImageResource(bundle: R.hostingBundle, name: "so")
    /// Image `social-1`.
    static let social1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-1")
    /// Image `social`.
    static let social = Rswift.ImageResource(bundle: R.hostingBundle, name: "social")
    /// Image `sr`.
    static let sr = Rswift.ImageResource(bundle: R.hostingBundle, name: "sr")
    /// Image `ss`.
    static let ss = Rswift.ImageResource(bundle: R.hostingBundle, name: "ss")
    /// Image `st`.
    static let st = Rswift.ImageResource(bundle: R.hostingBundle, name: "st")
    /// Image `standard-pick-icon`.
    static let standardPickIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "standard-pick-icon")
    /// Image `standard-pick-trailer-icon`.
    static let standardPickTrailerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "standard-pick-trailer-icon")
    /// Image `star-gray-icon`.
    static let starGrayIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "star-gray-icon")
    /// Image `star-icon`.
    static let starIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "star-icon")
    /// Image `street-icon`.
    static let streetIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "street-icon")
    /// Image `sv`.
    static let sv = Rswift.ImageResource(bundle: R.hostingBundle, name: "sv")
    /// Image `sx`.
    static let sx = Rswift.ImageResource(bundle: R.hostingBundle, name: "sx")
    /// Image `sy`.
    static let sy = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy")
    /// Image `sz`.
    static let sz = Rswift.ImageResource(bundle: R.hostingBundle, name: "sz")
    /// Image `take-border-icon`.
    static let takeBorderIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "take-border-icon")
    /// Image `take-photo-icon`.
    static let takePhotoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "take-photo-icon")
    /// Image `tc`.
    static let tc = Rswift.ImageResource(bundle: R.hostingBundle, name: "tc")
    /// Image `td`.
    static let td = Rswift.ImageResource(bundle: R.hostingBundle, name: "td")
    /// Image `tf`.
    static let tf = Rswift.ImageResource(bundle: R.hostingBundle, name: "tf")
    /// Image `tg`.
    static let tg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tg")
    /// Image `th`.
    static let th = Rswift.ImageResource(bundle: R.hostingBundle, name: "th")
    /// Image `thanku-icon-1`.
    static let thankuIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "thanku-icon-1")
    /// Image `thanku-icon`.
    static let thankuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "thanku-icon")
    /// Image `tick-icon-1`.
    static let tickIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-icon-1")
    /// Image `tick-icon`.
    static let tickIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-icon")
    /// Image `tip-icon`.
    static let tipIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tip-icon")
    /// Image `tj`.
    static let tj = Rswift.ImageResource(bundle: R.hostingBundle, name: "tj")
    /// Image `tk`.
    static let tk = Rswift.ImageResource(bundle: R.hostingBundle, name: "tk")
    /// Image `tl`.
    static let tl = Rswift.ImageResource(bundle: R.hostingBundle, name: "tl")
    /// Image `tm`.
    static let tm = Rswift.ImageResource(bundle: R.hostingBundle, name: "tm")
    /// Image `tn`.
    static let tn = Rswift.ImageResource(bundle: R.hostingBundle, name: "tn")
    /// Image `to`.
    static let to = Rswift.ImageResource(bundle: R.hostingBundle, name: "to")
    /// Image `today-icon`.
    static let todayIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "today-icon")
    /// Image `tr`.
    static let tr = Rswift.ImageResource(bundle: R.hostingBundle, name: "tr")
    /// Image `trucking-other-icon`.
    static let truckingOtherIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trucking-other-icon")
    /// Image `tt`.
    static let tt = Rswift.ImageResource(bundle: R.hostingBundle, name: "tt")
    /// Image `tv`.
    static let tv = Rswift.ImageResource(bundle: R.hostingBundle, name: "tv")
    /// Image `tw`.
    static let tw = Rswift.ImageResource(bundle: R.hostingBundle, name: "tw")
    /// Image `tz`.
    static let tz = Rswift.ImageResource(bundle: R.hostingBundle, name: "tz")
    /// Image `ua`.
    static let ua = Rswift.ImageResource(bundle: R.hostingBundle, name: "ua")
    /// Image `ug`.
    static let ug = Rswift.ImageResource(bundle: R.hostingBundle, name: "ug")
    /// Image `um`.
    static let um = Rswift.ImageResource(bundle: R.hostingBundle, name: "um")
    /// Image `unnamed`.
    static let unnamed = Rswift.ImageResource(bundle: R.hostingBundle, name: "unnamed")
    /// Image `upload-icom`.
    static let uploadIcom = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload-icom")
    /// Image `us`.
    static let us = Rswift.ImageResource(bundle: R.hostingBundle, name: "us")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `uy`.
    static let uy = Rswift.ImageResource(bundle: R.hostingBundle, name: "uy")
    /// Image `uz`.
    static let uz = Rswift.ImageResource(bundle: R.hostingBundle, name: "uz")
    /// Image `va`.
    static let va = Rswift.ImageResource(bundle: R.hostingBundle, name: "va")
    /// Image `vc`.
    static let vc = Rswift.ImageResource(bundle: R.hostingBundle, name: "vc")
    /// Image `ve`.
    static let ve = Rswift.ImageResource(bundle: R.hostingBundle, name: "ve")
    /// Image `vg`.
    static let vg = Rswift.ImageResource(bundle: R.hostingBundle, name: "vg")
    /// Image `vi`.
    static let vi = Rswift.ImageResource(bundle: R.hostingBundle, name: "vi")
    /// Image `vn`.
    static let vn = Rswift.ImageResource(bundle: R.hostingBundle, name: "vn")
    /// Image `vu`.
    static let vu = Rswift.ImageResource(bundle: R.hostingBundle, name: "vu")
    /// Image `wf`.
    static let wf = Rswift.ImageResource(bundle: R.hostingBundle, name: "wf")
    /// Image `when-icon`.
    static let whenIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "when-icon")
    /// Image `where-border`.
    static let whereBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "where-border")
    /// Image `where-icon`.
    static let whereIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "where-icon")
    /// Image `where-tick-green`.
    static let whereTickGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "where-tick-green")
    /// Image `ws`.
    static let ws = Rswift.ImageResource(bundle: R.hostingBundle, name: "ws")
    /// Image `ye`.
    static let ye = Rswift.ImageResource(bundle: R.hostingBundle, name: "ye")
    /// Image `yt`.
    static let yt = Rswift.ImageResource(bundle: R.hostingBundle, name: "yt")
    /// Image `za`.
    static let za = Rswift.ImageResource(bundle: R.hostingBundle, name: "za")
    /// Image `zm`.
    static let zm = Rswift.ImageResource(bundle: R.hostingBundle, name: "zm")
    /// Image `zw`.
    static let zw = Rswift.ImageResource(bundle: R.hostingBundle, name: "zw")
    /// Image `zz`.
    static let zz = Rswift.ImageResource(bundle: R.hostingBundle, name: "zz")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "About-icon", bundle: ..., traitCollection: ...)`
    static func aboutIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow-left-back", bundle: ..., traitCollection: ...)`
    static func arrowLeftBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeftBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow-sidemenu", bundle: ..., traitCollection: ...)`
    static func arrowSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Arrow-sidemenu-1", bundle: ..., traitCollection: ...)`
    static func arrowSidemenu1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowSidemenu1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Change-icon", bundle: ..., traitCollection: ...)`
    static func changeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cricle  login", bundle: ..., traitCollection: ...)`
    static func cricleLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cricleLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Future-icon-1", bundle: ..., traitCollection: ...)`
    static func futureIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.futureIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Haul-icon-1", bundle: ..., traitCollection: ...)`
    static func haulIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.haulIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home- icon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Junk removal", bundle: ..., traitCollection: ...)`
    static func junkRemoval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.junkRemoval, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logout-icon", bundle: ..., traitCollection: ...)`
    static func logoutIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoutIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Loogout-icon", bundle: ..., traitCollection: ...)`
    static func loogoutIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loogoutIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notification-sidemenu-iocn.", bundle: ..., traitCollection: ...)`
    static func notificationSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Painting-icon", bundle: ..., traitCollection: ...)`
    static func paintingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paintingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pay-bg", bundle: ..., traitCollection: ...)`
    static func payBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.payBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Photo-icon-1", bundle: ..., traitCollection: ...)`
    static func photoIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pin-location", bundle: ..., traitCollection: ...)`
    static func pinLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pin-men", bundle: ..., traitCollection: ...)`
    static func pinMen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinMen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Privacy-icon", bundle: ..., traitCollection: ...)`
    static func privacyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacyIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile-icon-sidemenu", bundle: ..., traitCollection: ...)`
    static func profileIconSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIconSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected-icon", bundle: ..., traitCollection: ...)`
    static func selectedIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selected-icon-1", bundle: ..., traitCollection: ...)`
    static func selectedIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Stadnard-icomn-3", bundle: ..., traitCollection: ...)`
    static func stadnardIcomn3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stadnardIcomn3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Standard-icon", bundle: ..., traitCollection: ...)`
    static func standardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standardIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Today-icon-1", bundle: ..., traitCollection: ...)`
    static func todayIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tracking-upcomingscreen", bundle: ..., traitCollection: ...)`
    static func trackingUpcomingscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trackingUpcomingscreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "about-sidemenu", bundle: ..., traitCollection: ...)`
    static func aboutSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aboutus-icon", bundle: ..., traitCollection: ...)`
    static func aboutusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutusIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accept-icon", bundle: ..., traitCollection: ...)`
    static func acceptIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acceptIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accept-icon-1", bundle: ..., traitCollection: ...)`
    static func acceptIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.acceptIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ad", bundle: ..., traitCollection: ...)`
    static func ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-card-icon", bundle: ..., traitCollection: ...)`
    static func addCardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addCardIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-fav-icon", bundle: ..., traitCollection: ...)`
    static func addFavIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFavIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-favorite-icon", bundle: ..., traitCollection: ...)`
    static func addFavoriteIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addFavoriteIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-new-card-icon", bundle: ..., traitCollection: ...)`
    static func addNewCardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addNewCardIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-work", bundle: ..., traitCollection: ...)`
    static func addWork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addWork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-work-icon", bundle: ..., traitCollection: ...)`
    static func addWorkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addWorkIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ae", bundle: ..., traitCollection: ...)`
    static func ae(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ae, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "af", bundle: ..., traitCollection: ...)`
    static func af(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.af, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ag", bundle: ..., traitCollection: ...)`
    static func ag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ai", bundle: ..., traitCollection: ...)`
    static func ai(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ai, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "air-conditioner", bundle: ..., traitCollection: ...)`
    static func airConditioner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.airConditioner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "al", bundle: ..., traitCollection: ...)`
    static func al(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.al, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "am", bundle: ..., traitCollection: ...)`
    static func am(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.am, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ao", bundle: ..., traitCollection: ...)`
    static func ao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aq", bundle: ..., traitCollection: ...)`
    static func aq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ar", bundle: ..., traitCollection: ...)`
    static func ar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "art-1", bundle: ..., traitCollection: ...)`
    static func art1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.art1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "art-2", bundle: ..., traitCollection: ...)`
    static func art2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.art2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "art-3", bundle: ..., traitCollection: ...)`
    static func art3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.art3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "as", bundle: ..., traitCollection: ...)`
    static func `as`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`as`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "at", bundle: ..., traitCollection: ...)`
    static func at(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.at, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "au", bundle: ..., traitCollection: ...)`
    static func au(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.au, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "auto:boat", bundle: ..., traitCollection: ...)`
    static func autoBoat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoBoat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aw", bundle: ..., traitCollection: ...)`
    static func aw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ax", bundle: ..., traitCollection: ...)`
    static func ax(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ax, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "az", bundle: ..., traitCollection: ...)`
    static func az(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.az, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ba", bundle: ..., traitCollection: ...)`
    static func ba(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ba, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backArr", bundle: ..., traitCollection: ...)`
    static func backArr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background-search", bundle: ..., traitCollection: ...)`
    static func backgroundSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background-slected", bundle: ..., traitCollection: ...)`
    static func backgroundSlected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundSlected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background-white", bundle: ..., traitCollection: ...)`
    static func backgroundWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bank-no-slected", bundle: ..., traitCollection: ...)`
    static func bankNoSlected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankNoSlected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bb", bundle: ..., traitCollection: ...)`
    static func bb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bd", bundle: ..., traitCollection: ...)`
    static func bd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "be", bundle: ..., traitCollection: ...)`
    static func be(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.be, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bf", bundle: ..., traitCollection: ...)`
    static func bf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg", bundle: ..., traitCollection: ...)`
    static func bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bh", bundle: ..., traitCollection: ...)`
    static func bh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bi", bundle: ..., traitCollection: ...)`
    static func bi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bj", bundle: ..., traitCollection: ...)`
    static func bj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bl", bundle: ..., traitCollection: ...)`
    static func bl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blue-bg-home", bundle: ..., traitCollection: ...)`
    static func blueBgHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueBgHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bm", bundle: ..., traitCollection: ...)`
    static func bm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bn", bundle: ..., traitCollection: ...)`
    static func bn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bo", bundle: ..., traitCollection: ...)`
    static func bo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bq", bundle: ..., traitCollection: ...)`
    static func bq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "br", bundle: ..., traitCollection: ...)`
    static func br(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.br, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bs", bundle: ..., traitCollection: ...)`
    static func bs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bt", bundle: ..., traitCollection: ...)`
    static func bt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bv", bundle: ..., traitCollection: ...)`
    static func bv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bw", bundle: ..., traitCollection: ...)`
    static func bw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "by", bundle: ..., traitCollection: ...)`
    static func by(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.by, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bz", bundle: ..., traitCollection: ...)`
    static func bz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ca", bundle: ..., traitCollection: ...)`
    static func ca(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ca, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar-icon", bundle: ..., traitCollection: ...)`
    static func calendarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar-icon-1", bundle: ..., traitCollection: ...)`
    static func calendarIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call-icon", bundle: ..., traitCollection: ...)`
    static func callIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call-icon-1", bundle: ..., traitCollection: ...)`
    static func callIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera-icon", bundle: ..., traitCollection: ...)`
    static func cameraIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera-small-icon", bundle: ..., traitCollection: ...)`
    static func cameraSmallIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraSmallIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera-upload-icon", bundle: ..., traitCollection: ...)`
    static func cameraUploadIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraUploadIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel-border", bundle: ..., traitCollection: ...)`
    static func cancelBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel-icon", bundle: ..., traitCollection: ...)`
    static func cancelIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card-expiry-border", bundle: ..., traitCollection: ...)`
    static func cardExpiryBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardExpiryBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card-expiry-dropdown", bundle: ..., traitCollection: ...)`
    static func cardExpiryDropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardExpiryDropdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "card-option-cricle", bundle: ..., traitCollection: ...)`
    static func cardOptionCricle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardOptionCricle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cc", bundle: ..., traitCollection: ...)`
    static func cc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cd", bundle: ..., traitCollection: ...)`
    static func cd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf", bundle: ..., traitCollection: ...)`
    static func cf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cg", bundle: ..., traitCollection: ...)`
    static func cg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ch", bundle: ..., traitCollection: ...)`
    static func ch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "change-icon-1", bundle: ..., traitCollection: ...)`
    static func changeIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "change-sidemenu", bundle: ..., traitCollection: ...)`
    static func changeSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-bg-cricle", bundle: ..., traitCollection: ...)`
    static func chatBgCricle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatBgCricle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat-icon-gray", bundle: ..., traitCollection: ...)`
    static func chatIconGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatIconGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chats-sidemenu-iocn.", bundle: ..., traitCollection: ...)`
    static func chatsSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatsSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ci", bundle: ..., traitCollection: ...)`
    static func ci(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ci, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle-dots-profie", bundle: ..., traitCollection: ...)`
    static func circleDotsProfie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleDotsProfie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle-home", bundle: ..., traitCollection: ...)`
    static func circleHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cirlce-color", bundle: ..., traitCollection: ...)`
    static func cirlceColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cirlceColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "city-border", bundle: ..., traitCollection: ...)`
    static func cityBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cityBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ck", bundle: ..., traitCollection: ...)`
    static func ck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cl", bundle: ..., traitCollection: ...)`
    static func cl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cm", bundle: ..., traitCollection: ...)`
    static func cm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cn", bundle: ..., traitCollection: ...)`
    static func cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "co", bundle: ..., traitCollection: ...)`
    static func co(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.co, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "courior-taxi-icon", bundle: ..., traitCollection: ...)`
    static func couriorTaxiIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.couriorTaxiIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cr", bundle: ..., traitCollection: ...)`
    static func cr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cu", bundle: ..., traitCollection: ...)`
    static func cu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cv", bundle: ..., traitCollection: ...)`
    static func cv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cvv-icon", bundle: ..., traitCollection: ...)`
    static func cvvIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cvvIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cw", bundle: ..., traitCollection: ...)`
    static func cw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cx", bundle: ..., traitCollection: ...)`
    static func cx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cy", bundle: ..., traitCollection: ...)`
    static func cy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cz", bundle: ..., traitCollection: ...)`
    static func cz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "de", bundle: ..., traitCollection: ...)`
    static func de(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.de, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "decline-icon", bundle: ..., traitCollection: ...)`
    static func declineIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.declineIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "decline-icon-1", bundle: ..., traitCollection: ...)`
    static func declineIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.declineIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "decline-red", bundle: ..., traitCollection: ...)`
    static func declineRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.declineRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dj", bundle: ..., traitCollection: ...)`
    static func dj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dk", bundle: ..., traitCollection: ...)`
    static func dk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dm", bundle: ..., traitCollection: ...)`
    static func dm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "do", bundle: ..., traitCollection: ...)`
    static func `do`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`do`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dots-black", bundle: ..., traitCollection: ...)`
    static func dotsBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotsBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dots.gray", bundle: ..., traitCollection: ...)`
    static func dotsGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotsGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down-arrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dz", bundle: ..., traitCollection: ...)`
    static func dz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ec", bundle: ..., traitCollection: ...)`
    static func ec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ec, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit-profile-icon", bundle: ..., traitCollection: ...)`
    static func editProfileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editProfileIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit-tools-icon", bundle: ..., traitCollection: ...)`
    static func editToolsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editToolsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ee", bundle: ..., traitCollection: ...)`
    static func ee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ee, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eg", bundle: ..., traitCollection: ...)`
    static func eg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eh", bundle: ..., traitCollection: ...)`
    static func eh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "er", bundle: ..., traitCollection: ...)`
    static func er(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.er, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "es", bundle: ..., traitCollection: ...)`
    static func es(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.es, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "et", bundle: ..., traitCollection: ...)`
    static func et(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.et, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-icon", bundle: ..., traitCollection: ...)`
    static func facebookIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite-footer", bundle: ..., traitCollection: ...)`
    static func favoriteFooter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteFooter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite-icon", bundle: ..., traitCollection: ...)`
    static func favoriteIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorites-icon", bundle: ..., traitCollection: ...)`
    static func favoritesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoritesIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favortie-icon", bundle: ..., traitCollection: ...)`
    static func favortieIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favortieIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fi", bundle: ..., traitCollection: ...)`
    static func fi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter-icon", bundle: ..., traitCollection: ...)`
    static func filterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fj", bundle: ..., traitCollection: ...)`
    static func fj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fk", bundle: ..., traitCollection: ...)`
    static func fk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fm", bundle: ..., traitCollection: ...)`
    static func fm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fo", bundle: ..., traitCollection: ...)`
    static func fo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fr", bundle: ..., traitCollection: ...)`
    static func fr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "future-icon", bundle: ..., traitCollection: ...)`
    static func futureIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.futureIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ga", bundle: ..., traitCollection: ...)`
    static func ga(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ga, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gb", bundle: ..., traitCollection: ...)`
    static func gb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gd", bundle: ..., traitCollection: ...)`
    static func gd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ge", bundle: ..., traitCollection: ...)`
    static func ge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gf", bundle: ..., traitCollection: ...)`
    static func gf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gg", bundle: ..., traitCollection: ...)`
    static func gg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gh", bundle: ..., traitCollection: ...)`
    static func gh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gi", bundle: ..., traitCollection: ...)`
    static func gi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gl", bundle: ..., traitCollection: ...)`
    static func gl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gm", bundle: ..., traitCollection: ...)`
    static func gm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gn", bundle: ..., traitCollection: ...)`
    static func gn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google-plus-icon", bundle: ..., traitCollection: ...)`
    static func googlePlusIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googlePlusIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gp", bundle: ..., traitCollection: ...)`
    static func gp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gq", bundle: ..., traitCollection: ...)`
    static func gq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gr", bundle: ..., traitCollection: ...)`
    static func gr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gray-bg", bundle: ..., traitCollection: ...)`
    static func grayBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grayBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gs", bundle: ..., traitCollection: ...)`
    static func gs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gt", bundle: ..., traitCollection: ...)`
    static func gt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gu", bundle: ..., traitCollection: ...)`
    static func gu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gw", bundle: ..., traitCollection: ...)`
    static func gw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gy", bundle: ..., traitCollection: ...)`
    static func gy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "handyman-icon", bundle: ..., traitCollection: ...)`
    static func handymanIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.handymanIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "haul-icon", bundle: ..., traitCollection: ...)`
    static func haulIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.haulIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help-sidemenu", bundle: ..., traitCollection: ...)`
    static func helpSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hk", bundle: ..., traitCollection: ...)`
    static func hk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hm", bundle: ..., traitCollection: ...)`
    static func hm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hn", bundle: ..., traitCollection: ...)`
    static func hn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-footer", bundle: ..., traitCollection: ...)`
    static func homeFooter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeFooter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-sidemenu-iocn", bundle: ..., traitCollection: ...)`
    static func homeSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hr", bundle: ..., traitCollection: ...)`
    static func hr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ht", bundle: ..., traitCollection: ...)`
    static func ht(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ht, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hu", bundle: ..., traitCollection: ...)`
    static func hu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "id", bundle: ..., traitCollection: ...)`
    static func id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ie", bundle: ..., traitCollection: ...)`
    static func ie(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ie, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "il", bundle: ..., traitCollection: ...)`
    static func il(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.il, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "im", bundle: ..., traitCollection: ...)`
    static func im(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.im, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img", bundle: ..., traitCollection: ...)`
    static func img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "in", bundle: ..., traitCollection: ...)`
    static func `in`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`in`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "io", bundle: ..., traitCollection: ...)`
    static func io(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.io, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iq", bundle: ..., traitCollection: ...)`
    static func iq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ir", bundle: ..., traitCollection: ...)`
    static func ir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ir, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "is", bundle: ..., traitCollection: ...)`
    static func `is`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`is`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "it", bundle: ..., traitCollection: ...)`
    static func it(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.it, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "je", bundle: ..., traitCollection: ...)`
    static func je(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.je, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jm", bundle: ..., traitCollection: ...)`
    static func jm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jo", bundle: ..., traitCollection: ...)`
    static func jo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "job-sidemenu-iocn.", bundle: ..., traitCollection: ...)`
    static func jobSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jobSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jp", bundle: ..., traitCollection: ...)`
    static func jp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ke", bundle: ..., traitCollection: ...)`
    static func ke(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ke, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kg", bundle: ..., traitCollection: ...)`
    static func kg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kh", bundle: ..., traitCollection: ...)`
    static func kh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ki", bundle: ..., traitCollection: ...)`
    static func ki(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ki, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "km", bundle: ..., traitCollection: ...)`
    static func km(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.km, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kn", bundle: ..., traitCollection: ...)`
    static func kn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kp", bundle: ..., traitCollection: ...)`
    static func kp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kr", bundle: ..., traitCollection: ...)`
    static func kr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kw", bundle: ..., traitCollection: ...)`
    static func kw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ky", bundle: ..., traitCollection: ...)`
    static func ky(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ky, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kz", bundle: ..., traitCollection: ...)`
    static func kz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "la", bundle: ..., traitCollection: ...)`
    static func la(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.la, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lb", bundle: ..., traitCollection: ...)`
    static func lb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lc", bundle: ..., traitCollection: ...)`
    static func lc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "li", bundle: ..., traitCollection: ...)`
    static func li(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.li, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "light-cricle-map", bundle: ..., traitCollection: ...)`
    static func lightCricleMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightCricleMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "line-sidemenu", bundle: ..., traitCollection: ...)`
    static func lineSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list-footer-icon", bundle: ..., traitCollection: ...)`
    static func listFooterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listFooterIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list-icon-home", bundle: ..., traitCollection: ...)`
    static func listIconHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listIconHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lk", bundle: ..., traitCollection: ...)`
    static func lk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoout-sidemenu", bundle: ..., traitCollection: ...)`
    static func logooutSidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logooutSidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout-sidemenu-iocn.", bundle: ..., traitCollection: ...)`
    static func logoutSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoutSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lr", bundle: ..., traitCollection: ...)`
    static func lr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ls", bundle: ..., traitCollection: ...)`
    static func ls(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ls, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lt", bundle: ..., traitCollection: ...)`
    static func lt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lu", bundle: ..., traitCollection: ...)`
    static func lu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lv", bundle: ..., traitCollection: ...)`
    static func lv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ly", bundle: ..., traitCollection: ...)`
    static func ly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ma", bundle: ..., traitCollection: ...)`
    static func ma(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ma, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marker", bundle: ..., traitCollection: ...)`
    static func marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marker-icon", bundle: ..., traitCollection: ...)`
    static func markerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markerIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mc", bundle: ..., traitCollection: ...)`
    static func mc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "md", bundle: ..., traitCollection: ...)`
    static func md(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.md, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "me", bundle: ..., traitCollection: ...)`
    static func me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.me, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-icon", bundle: ..., traitCollection: ...)`
    static func menuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu-icon-top", bundle: ..., traitCollection: ...)`
    static func menuIconTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuIconTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message-footer-icon", bundle: ..., traitCollection: ...)`
    static func messageFooterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageFooterIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message-icon", bundle: ..., traitCollection: ...)`
    static func messageIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "messge-search-icon", bundle: ..., traitCollection: ...)`
    static func messgeSearchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messgeSearchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mf", bundle: ..., traitCollection: ...)`
    static func mf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mg", bundle: ..., traitCollection: ...)`
    static func mg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mh", bundle: ..., traitCollection: ...)`
    static func mh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mk", bundle: ..., traitCollection: ...)`
    static func mk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ml", bundle: ..., traitCollection: ...)`
    static func ml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mm", bundle: ..., traitCollection: ...)`
    static func mm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mn", bundle: ..., traitCollection: ...)`
    static func mn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mo", bundle: ..., traitCollection: ...)`
    static func mo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mp", bundle: ..., traitCollection: ...)`
    static func mp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mq", bundle: ..., traitCollection: ...)`
    static func mq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mr", bundle: ..., traitCollection: ...)`
    static func mr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ms", bundle: ..., traitCollection: ...)`
    static func ms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ms, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mt", bundle: ..., traitCollection: ...)`
    static func mt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mu", bundle: ..., traitCollection: ...)`
    static func mu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mv", bundle: ..., traitCollection: ...)`
    static func mv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mw", bundle: ..., traitCollection: ...)`
    static func mw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mx", bundle: ..., traitCollection: ...)`
    static func mx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my", bundle: ..., traitCollection: ...)`
    static func my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mz", bundle: ..., traitCollection: ...)`
    static func mz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "na", bundle: ..., traitCollection: ...)`
    static func na(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.na, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nc", bundle: ..., traitCollection: ...)`
    static func nc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ne", bundle: ..., traitCollection: ...)`
    static func ne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearest-men", bundle: ..., traitCollection: ...)`
    static func nearestMen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearestMen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nf", bundle: ..., traitCollection: ...)`
    static func nf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ng", bundle: ..., traitCollection: ...)`
    static func ng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ni", bundle: ..., traitCollection: ...)`
    static func ni(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ni, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nl", bundle: ..., traitCollection: ...)`
    static func nl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no", bundle: ..., traitCollection: ...)`
    static func no(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification-icon", bundle: ..., traitCollection: ...)`
    static func notificationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification-top", bundle: ..., traitCollection: ...)`
    static func notificationTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "now-icon", bundle: ..., traitCollection: ...)`
    static func nowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "now-icon-1", bundle: ..., traitCollection: ...)`
    static func nowIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nowIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "np", bundle: ..., traitCollection: ...)`
    static func np(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.np, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nr", bundle: ..., traitCollection: ...)`
    static func nr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nu", bundle: ..., traitCollection: ...)`
    static func nu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nz", bundle: ..., traitCollection: ...)`
    static func nz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "om", bundle: ..., traitCollection: ...)`
    static func om(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.om, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "other-icon", bundle: ..., traitCollection: ...)`
    static func otherIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.otherIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pa", bundle: ..., traitCollection: ...)`
    static func pa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password-icon", bundle: ..., traitCollection: ...)`
    static func passwordIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pe", bundle: ..., traitCollection: ...)`
    static func pe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pet-care", bundle: ..., traitCollection: ...)`
    static func petCare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petCare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pf", bundle: ..., traitCollection: ...)`
    static func pf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pg", bundle: ..., traitCollection: ...)`
    static func pg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ph", bundle: ..., traitCollection: ...)`
    static func ph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ph, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo-icon", bundle: ..., traitCollection: ...)`
    static func photoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pk", bundle: ..., traitCollection: ...)`
    static func pk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pl", bundle: ..., traitCollection: ...)`
    static func pl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "place-bid-bg", bundle: ..., traitCollection: ...)`
    static func placeBidBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeBidBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pm", bundle: ..., traitCollection: ...)`
    static func pm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pn", bundle: ..., traitCollection: ...)`
    static func pn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "poly", bundle: ..., traitCollection: ...)`
    static func poly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pr", bundle: ..., traitCollection: ...)`
    static func pr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy-icon-1", bundle: ..., traitCollection: ...)`
    static func privacyIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacyIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy-sidemenu", bundle: ..., traitCollection: ...)`
    static func privacySidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacySidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ps", bundle: ..., traitCollection: ...)`
    static func ps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pt", bundle: ..., traitCollection: ...)`
    static func pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pw", bundle: ..., traitCollection: ...)`
    static func pw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "py", bundle: ..., traitCollection: ...)`
    static func py(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.py, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qa", bundle: ..., traitCollection: ...)`
    static func qa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio", bundle: ..., traitCollection: ...)`
    static func radio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "re", bundle: ..., traitCollection: ...)`
    static func re(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.re, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "remember-icon", bundle: ..., traitCollection: ...)`
    static func rememberIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rememberIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reviews-sidemenu-iocn.", bundle: ..., traitCollection: ...)`
    static func reviewsSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewsSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ro", bundle: ..., traitCollection: ...)`
    static func ro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rs", bundle: ..., traitCollection: ...)`
    static func rs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ru", bundle: ..., traitCollection: ...)`
    static func ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ru, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rw", bundle: ..., traitCollection: ...)`
    static func rw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sa", bundle: ..., traitCollection: ...)`
    static func sa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sb", bundle: ..., traitCollection: ...)`
    static func sb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sc", bundle: ..., traitCollection: ...)`
    static func sc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd", bundle: ..., traitCollection: ...)`
    static func sd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "se", bundle: ..., traitCollection: ...)`
    static func se(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.se, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search-icon", bundle: ..., traitCollection: ...)`
    static func searchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "seetings-sidemenu-iocn.", bundle: ..., traitCollection: ...)`
    static func seetingsSidemenuIocn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seetingsSidemenuIocn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting-icon", bundle: ..., traitCollection: ...)`
    static func settingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-footer", bundle: ..., traitCollection: ...)`
    static func settingsFooter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsFooter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sg", bundle: ..., traitCollection: ...)`
    static func sg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sh", bundle: ..., traitCollection: ...)`
    static func sh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharpCut", bundle: ..., traitCollection: ...)`
    static func sharpCut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharpCut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "si", bundle: ..., traitCollection: ...)`
    static func si(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.si, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sideArrow", bundle: ..., traitCollection: ...)`
    static func sideArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sideArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sj", bundle: ..., traitCollection: ...)`
    static func sj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sk", bundle: ..., traitCollection: ...)`
    static func sk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sl", bundle: ..., traitCollection: ...)`
    static func sl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sm", bundle: ..., traitCollection: ...)`
    static func sm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sn", bundle: ..., traitCollection: ...)`
    static func sn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "so", bundle: ..., traitCollection: ...)`
    static func so(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.so, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "social", bundle: ..., traitCollection: ...)`
    static func social(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.social, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "social-1", bundle: ..., traitCollection: ...)`
    static func social1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.social1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sr", bundle: ..., traitCollection: ...)`
    static func sr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ss", bundle: ..., traitCollection: ...)`
    static func ss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "st", bundle: ..., traitCollection: ...)`
    static func st(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.st, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "standard-pick-icon", bundle: ..., traitCollection: ...)`
    static func standardPickIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standardPickIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "standard-pick-trailer-icon", bundle: ..., traitCollection: ...)`
    static func standardPickTrailerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standardPickTrailerIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star-gray-icon", bundle: ..., traitCollection: ...)`
    static func starGrayIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starGrayIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star-icon", bundle: ..., traitCollection: ...)`
    static func starIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "street-icon", bundle: ..., traitCollection: ...)`
    static func streetIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.streetIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sv", bundle: ..., traitCollection: ...)`
    static func sv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sx", bundle: ..., traitCollection: ...)`
    static func sx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy", bundle: ..., traitCollection: ...)`
    static func sy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sz", bundle: ..., traitCollection: ...)`
    static func sz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take-border-icon", bundle: ..., traitCollection: ...)`
    static func takeBorderIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeBorderIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "take-photo-icon", bundle: ..., traitCollection: ...)`
    static func takePhotoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takePhotoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tc", bundle: ..., traitCollection: ...)`
    static func tc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "td", bundle: ..., traitCollection: ...)`
    static func td(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.td, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tf", bundle: ..., traitCollection: ...)`
    static func tf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tg", bundle: ..., traitCollection: ...)`
    static func tg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "th", bundle: ..., traitCollection: ...)`
    static func th(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.th, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thanku-icon", bundle: ..., traitCollection: ...)`
    static func thankuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thankuIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thanku-icon-1", bundle: ..., traitCollection: ...)`
    static func thankuIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thankuIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick-icon", bundle: ..., traitCollection: ...)`
    static func tickIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick-icon-1", bundle: ..., traitCollection: ...)`
    static func tickIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tip-icon", bundle: ..., traitCollection: ...)`
    static func tipIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tipIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tj", bundle: ..., traitCollection: ...)`
    static func tj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tk", bundle: ..., traitCollection: ...)`
    static func tk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tl", bundle: ..., traitCollection: ...)`
    static func tl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tm", bundle: ..., traitCollection: ...)`
    static func tm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tn", bundle: ..., traitCollection: ...)`
    static func tn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "to", bundle: ..., traitCollection: ...)`
    static func to(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.to, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "today-icon", bundle: ..., traitCollection: ...)`
    static func todayIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tr", bundle: ..., traitCollection: ...)`
    static func tr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trucking-other-icon", bundle: ..., traitCollection: ...)`
    static func truckingOtherIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truckingOtherIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tt", bundle: ..., traitCollection: ...)`
    static func tt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tv", bundle: ..., traitCollection: ...)`
    static func tv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tw", bundle: ..., traitCollection: ...)`
    static func tw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tz", bundle: ..., traitCollection: ...)`
    static func tz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ua", bundle: ..., traitCollection: ...)`
    static func ua(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ua, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ug", bundle: ..., traitCollection: ...)`
    static func ug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "um", bundle: ..., traitCollection: ...)`
    static func um(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.um, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unnamed", bundle: ..., traitCollection: ...)`
    static func unnamed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unnamed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload-icom", bundle: ..., traitCollection: ...)`
    static func uploadIcom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadIcom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "us", bundle: ..., traitCollection: ...)`
    static func us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uy", bundle: ..., traitCollection: ...)`
    static func uy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uz", bundle: ..., traitCollection: ...)`
    static func uz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "va", bundle: ..., traitCollection: ...)`
    static func va(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.va, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vc", bundle: ..., traitCollection: ...)`
    static func vc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ve", bundle: ..., traitCollection: ...)`
    static func ve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vg", bundle: ..., traitCollection: ...)`
    static func vg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vi", bundle: ..., traitCollection: ...)`
    static func vi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vn", bundle: ..., traitCollection: ...)`
    static func vn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "vu", bundle: ..., traitCollection: ...)`
    static func vu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wf", bundle: ..., traitCollection: ...)`
    static func wf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "when-icon", bundle: ..., traitCollection: ...)`
    static func whenIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whenIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "where-border", bundle: ..., traitCollection: ...)`
    static func whereBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whereBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "where-icon", bundle: ..., traitCollection: ...)`
    static func whereIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whereIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "where-tick-green", bundle: ..., traitCollection: ...)`
    static func whereTickGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whereTickGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ws", bundle: ..., traitCollection: ...)`
    static func ws(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ws, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ye", bundle: ..., traitCollection: ...)`
    static func ye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yt", bundle: ..., traitCollection: ...)`
    static func yt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "za", bundle: ..., traitCollection: ...)`
    static func za(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.za, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zm", bundle: ..., traitCollection: ...)`
    static func zm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zw", bundle: ..., traitCollection: ...)`
    static func zw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zz", bundle: ..., traitCollection: ...)`
    static func zz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zz, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 28 nibs.
  struct nib {
    /// Nib `CardCell`.
    static let cardCell = _R.nib._CardCell()
    /// Nib `CategoryCell`.
    static let categoryCell = _R.nib._CategoryCell()
    /// Nib `CertificateCell`.
    static let certificateCell = _R.nib._CertificateCell()
    /// Nib `CustomAlertView`.
    static let customAlertView = _R.nib._CustomAlertView()
    /// Nib `FavouriteCell`.
    static let favouriteCell = _R.nib._FavouriteCell()
    /// Nib `IdentityCell`.
    static let identityCell = _R.nib._IdentityCell()
    /// Nib `InboxCell`.
    static let inboxCell = _R.nib._InboxCell()
    /// Nib `JobCell`.
    static let jobCell = _R.nib._JobCell()
    /// Nib `JobInfoTypeCell`.
    static let jobInfoTypeCell = _R.nib._JobInfoTypeCell()
    /// Nib `JobMarkerView`.
    static let jobMarkerView = _R.nib._JobMarkerView()
    /// Nib `JobPhotoCell`.
    static let jobPhotoCell = _R.nib._JobPhotoCell()
    /// Nib `LanguageCell`.
    static let languageCell = _R.nib._LanguageCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `OnboardingCell`.
    static let onboardingCell = _R.nib._OnboardingCell()
    /// Nib `PaymentMethodCell`.
    static let paymentMethodCell = _R.nib._PaymentMethodCell()
    /// Nib `PortfolioCell`.
    static let portfolioCell = _R.nib._PortfolioCell()
    /// Nib `ProfileOptionCell`.
    static let profileOptionCell = _R.nib._ProfileOptionCell()
    /// Nib `ProviderBidCell`.
    static let providerBidCell = _R.nib._ProviderBidCell()
    /// Nib `ProviderCell`.
    static let providerCell = _R.nib._ProviderCell()
    /// Nib `ProviderListCell`.
    static let providerListCell = _R.nib._ProviderListCell()
    /// Nib `RectangularImageCell`.
    static let rectangularImageCell = _R.nib._RectangularImageCell()
    /// Nib `ReviewCell`.
    static let reviewCell = _R.nib._ReviewCell()
    /// Nib `SelectCategoryCell`.
    static let selectCategoryCell = _R.nib._SelectCategoryCell()
    /// Nib `SelectLocationVC`.
    static let selectLocationVC = _R.nib._SelectLocationVC()
    /// Nib `SelectPicturesView`.
    static let selectPicturesView = _R.nib._SelectPicturesView()
    /// Nib `SetPriceView`.
    static let setPriceView = _R.nib._SetPriceView()
    /// Nib `SideCell`.
    static let sideCell = _R.nib._SideCell()
    /// Nib `SubCategoryCell`.
    static let subCategoryCell = _R.nib._SubCategoryCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CardCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cardCell) instead")
    static func cardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCell) instead")
    static func categoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CertificateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.certificateCell) instead")
    static func certificateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.certificateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomAlertView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customAlertView) instead")
    static func customAlertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customAlertView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavouriteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favouriteCell) instead")
    static func favouriteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favouriteCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IdentityCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.identityCell) instead")
    static func identityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.identityCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InboxCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.inboxCell) instead")
    static func inboxCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inboxCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobCell) instead")
    static func jobCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobInfoTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobInfoTypeCell) instead")
    static func jobInfoTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobInfoTypeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobMarkerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobMarkerView) instead")
    static func jobMarkerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobMarkerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JobPhotoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jobPhotoCell) instead")
    static func jobPhotoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jobPhotoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageCell) instead")
    static func languageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingCell) instead")
    static func onboardingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PaymentMethodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentMethodCell) instead")
    static func paymentMethodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PortfolioCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.portfolioCell) instead")
    static func portfolioCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.portfolioCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileOptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileOptionCell) instead")
    static func profileOptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileOptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderBidCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerBidCell) instead")
    static func providerBidCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerBidCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerCell) instead")
    static func providerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProviderListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.providerListCell) instead")
    static func providerListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.providerListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RectangularImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rectangularImageCell) instead")
    static func rectangularImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rectangularImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewCell) instead")
    static func reviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectCategoryCell) instead")
    static func selectCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectLocationVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectLocationVC) instead")
    static func selectLocationVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectLocationVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectPicturesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectPicturesView) instead")
    static func selectPicturesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectPicturesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SetPriceView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.setPriceView) instead")
    static func setPriceView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setPriceView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SideCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideCell) instead")
    static func sideCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subCategoryCell) instead")
    static func subCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subCategoryCell)
    }
    #endif

    static func cardCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardCell? {
      return R.nib.cardCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardCell
    }

    static func categoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
      return R.nib.categoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
    }

    static func certificateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CertificateCell? {
      return R.nib.certificateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CertificateCell
    }

    static func customAlertView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customAlertView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func favouriteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavouriteCell? {
      return R.nib.favouriteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavouriteCell
    }

    static func identityCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IdentityCell? {
      return R.nib.identityCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IdentityCell
    }

    static func inboxCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InboxCell? {
      return R.nib.inboxCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InboxCell
    }

    static func jobCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobCell? {
      return R.nib.jobCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobCell
    }

    static func jobInfoTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobInfoTypeCell? {
      return R.nib.jobInfoTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobInfoTypeCell
    }

    static func jobMarkerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.jobMarkerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func jobPhotoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobPhotoCell? {
      return R.nib.jobPhotoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobPhotoCell
    }

    static func languageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageCell? {
      return R.nib.languageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func onboardingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnboardingCell? {
      return R.nib.onboardingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnboardingCell
    }

    static func paymentMethodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCell? {
      return R.nib.paymentMethodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
    }

    static func portfolioCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PortfolioCell? {
      return R.nib.portfolioCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PortfolioCell
    }

    static func profileOptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileOptionCell? {
      return R.nib.profileOptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileOptionCell
    }

    static func providerBidCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderBidCell? {
      return R.nib.providerBidCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderBidCell
    }

    static func providerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCell? {
      return R.nib.providerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCell
    }

    static func providerListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderListCell? {
      return R.nib.providerListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderListCell
    }

    static func rectangularImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RectangularImageCell? {
      return R.nib.rectangularImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RectangularImageCell
    }

    static func reviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewCell? {
      return R.nib.reviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
    }

    static func selectCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCategoryCell? {
      return R.nib.selectCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCategoryCell
    }

    static func selectLocationVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectLocationVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func selectPicturesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectPicturesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func setPriceView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.setPriceView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func sideCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideCell? {
      return R.nib.sideCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideCell
    }

    static func subCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryCell? {
      return R.nib.subCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 21 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CardCell`.
    static let cardCell: Rswift.ReuseIdentifier<CardCell> = Rswift.ReuseIdentifier(identifier: "CardCell")
    /// Reuse identifier `CategoryCell`.
    static let categoryCell: Rswift.ReuseIdentifier<CategoryCell> = Rswift.ReuseIdentifier(identifier: "CategoryCell")
    /// Reuse identifier `CertificateCell`.
    static let certificateCell: Rswift.ReuseIdentifier<CertificateCell> = Rswift.ReuseIdentifier(identifier: "CertificateCell")
    /// Reuse identifier `InboxCell`.
    static let inboxCell: Rswift.ReuseIdentifier<InboxCell> = Rswift.ReuseIdentifier(identifier: "InboxCell")
    /// Reuse identifier `JobCell`.
    static let jobCell: Rswift.ReuseIdentifier<JobCell> = Rswift.ReuseIdentifier(identifier: "JobCell")
    /// Reuse identifier `JobInfoTypeCell`.
    static let jobInfoTypeCell: Rswift.ReuseIdentifier<JobInfoTypeCell> = Rswift.ReuseIdentifier(identifier: "JobInfoTypeCell")
    /// Reuse identifier `JobPhotoCell`.
    static let jobPhotoCell: Rswift.ReuseIdentifier<JobPhotoCell> = Rswift.ReuseIdentifier(identifier: "JobPhotoCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `OnboardingCell`.
    static let onboardingCell: Rswift.ReuseIdentifier<OnboardingCell> = Rswift.ReuseIdentifier(identifier: "OnboardingCell")
    /// Reuse identifier `PaymentMethodCell`.
    static let paymentMethodCell: Rswift.ReuseIdentifier<PaymentMethodCell> = Rswift.ReuseIdentifier(identifier: "PaymentMethodCell")
    /// Reuse identifier `PortfolioCell`.
    static let portfolioCell: Rswift.ReuseIdentifier<PortfolioCell> = Rswift.ReuseIdentifier(identifier: "PortfolioCell")
    /// Reuse identifier `ProfileOptionCell`.
    static let profileOptionCell: Rswift.ReuseIdentifier<ProfileOptionCell> = Rswift.ReuseIdentifier(identifier: "ProfileOptionCell")
    /// Reuse identifier `ProviderBidCell`.
    static let providerBidCell: Rswift.ReuseIdentifier<ProviderBidCell> = Rswift.ReuseIdentifier(identifier: "ProviderBidCell")
    /// Reuse identifier `ProviderCell`.
    static let providerCell: Rswift.ReuseIdentifier<ProviderCell> = Rswift.ReuseIdentifier(identifier: "ProviderCell")
    /// Reuse identifier `ProviderListCell`.
    static let providerListCell: Rswift.ReuseIdentifier<ProviderListCell> = Rswift.ReuseIdentifier(identifier: "ProviderListCell")
    /// Reuse identifier `RectangularImageCell`.
    static let rectangularImageCell: Rswift.ReuseIdentifier<RectangularImageCell> = Rswift.ReuseIdentifier(identifier: "RectangularImageCell")
    /// Reuse identifier `ReviewCell`.
    static let reviewCell: Rswift.ReuseIdentifier<ReviewCell> = Rswift.ReuseIdentifier(identifier: "ReviewCell")
    /// Reuse identifier `SelectCategoryCell`.
    static let selectCategoryCell: Rswift.ReuseIdentifier<SelectCategoryCell> = Rswift.ReuseIdentifier(identifier: "SelectCategoryCell")
    /// Reuse identifier `SideCell`.
    static let sideCell: Rswift.ReuseIdentifier<SideCell> = Rswift.ReuseIdentifier(identifier: "SideCell")
    /// Reuse identifier `SubCategoryCell`.
    static let subCategoryCell: Rswift.ReuseIdentifier<SubCategoryCell> = Rswift.ReuseIdentifier(identifier: "SubCategoryCell")
    /// Reuse identifier `TableViewCellCountryCode`.
    static let tableViewCellCountryCode: Rswift.ReuseIdentifier<TableViewCellCountryCode> = Rswift.ReuseIdentifier(identifier: "TableViewCellCountryCode")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// Value: About Us
      static let aboutUs = Rswift.StringResource(key: "aboutUs", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change Password
      static let changePassword = Rswift.StringResource(key: "changePassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Chats
      static let chats = Rswift.StringResource(key: "chats", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GET STARTED
      static let getStart = Rswift.StringResource(key: "getStart", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Help And Support
      static let helpSupport = Rswift.StringResource(key: "helpSupport", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Home
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Information
      static let information = Rswift.StringResource(key: "information", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Jobs History
      static let jobHistory = Rswift.StringResource(key: "jobHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let notification = Rswift.StringResource(key: "notification", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Privacy Policy
      static let privacyPolicy = Rswift.StringResource(key: "privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reviews
      static let reviews = Rswift.StringResource(key: "reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sending Appointment Request
      static let requestSending = Rswift.StringResource(key: "requestSending", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terms & Conditions
      static let terms = Rswift.StringResource(key: "terms", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: About Us
      static func aboutUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aboutUs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aboutUs"
        }

        return NSLocalizedString("aboutUs", bundle: bundle, comment: "")
      }

      /// Value: Change Password
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("changePassword", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "changePassword"
        }

        return NSLocalizedString("changePassword", bundle: bundle, comment: "")
      }

      /// Value: Chats
      static func chats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chats"
        }

        return NSLocalizedString("chats", bundle: bundle, comment: "")
      }

      /// Value: GET STARTED
      static func getStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("getStart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "getStart"
        }

        return NSLocalizedString("getStart", bundle: bundle, comment: "")
      }

      /// Value: Help And Support
      static func helpSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("helpSupport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "helpSupport"
        }

        return NSLocalizedString("helpSupport", bundle: bundle, comment: "")
      }

      /// Value: Home
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// Value: Information
      static func information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information"
        }

        return NSLocalizedString("information", bundle: bundle, comment: "")
      }

      /// Value: Jobs History
      static func jobHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jobHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jobHistory"
        }

        return NSLocalizedString("jobHistory", bundle: bundle, comment: "")
      }

      /// Value: Logout
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, comment: "")
      }

      /// Value: NEXT
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// Value: Notifications
      static func notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notification"
        }

        return NSLocalizedString("notification", bundle: bundle, comment: "")
      }

      /// Value: Privacy Policy
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privacyPolicy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privacyPolicy"
        }

        return NSLocalizedString("privacyPolicy", bundle: bundle, comment: "")
      }

      /// Value: Profile
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", bundle: bundle, comment: "")
      }

      /// Value: Reviews
      static func reviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reviews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reviews"
        }

        return NSLocalizedString("reviews", bundle: bundle, comment: "")
      }

      /// Value: Sending Appointment Request
      static func requestSending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("requestSending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "requestSending"
        }

        return NSLocalizedString("requestSending", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// Value: Terms & Conditions
      static func terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms"
        }

        return NSLocalizedString("terms", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CardCell.validate()
      try _CategoryCell.validate()
      try _CertificateCell.validate()
      try _CustomAlertView.validate()
      try _FavouriteCell.validate()
      try _IdentityCell.validate()
      try _InboxCell.validate()
      try _JobCell.validate()
      try _JobInfoTypeCell.validate()
      try _JobMarkerView.validate()
      try _JobPhotoCell.validate()
      try _LanguageCell.validate()
      try _NotificationCell.validate()
      try _OnboardingCell.validate()
      try _PaymentMethodCell.validate()
      try _PortfolioCell.validate()
      try _ProfileOptionCell.validate()
      try _ProviderBidCell.validate()
      try _ProviderCell.validate()
      try _ProviderListCell.validate()
      try _ReviewCell.validate()
      try _SelectCategoryCell.validate()
      try _SelectLocationVC.validate()
      try _SelectPicturesView.validate()
      try _SetPriceView.validate()
      try _SubCategoryCell.validate()
    }

    struct _CardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CardCell

      let bundle = R.hostingBundle
      let identifier = "CardCell"
      let name = "CardCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "add-new-card-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-new-card-icon' is used in nib 'CardCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in nib 'CardCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CategoryCell

      let bundle = R.hostingBundle
      let identifier = "CategoryCell"
      let name = "CategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "courior-taxi-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'courior-taxi-icon' is used in nib 'CategoryCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down-arrow' is used in nib 'CategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CertificateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CertificateCell

      let bundle = R.hostingBundle
      let identifier = "CertificateCell"
      let name = "CertificateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CertificateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CertificateCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete-icon' is used in nib 'CertificateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-tools-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-tools-icon' is used in nib 'CertificateCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in nib 'CertificateCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'CertificateCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CustomAlertView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomAlertView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cancel-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel-icon' is used in nib 'CustomAlertView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'CustomAlertView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'CustomAlertView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FavouriteCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FavouriteCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavouriteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavouriteCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favorites-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favorites-icon' is used in nib 'FavouriteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed' is used in nib 'FavouriteCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'FavouriteCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _IdentityCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IdentityCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IdentityCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IdentityCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete-icon' is used in nib 'IdentityCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-tools-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-tools-icon' is used in nib 'IdentityCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in nib 'IdentityCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'IdentityCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _InboxCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InboxCell

      let bundle = R.hostingBundle
      let identifier = "InboxCell"
      let name = "InboxCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InboxCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InboxCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in nib 'InboxCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'InboxCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _JobCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = JobCell

      let bundle = R.hostingBundle
      let identifier = "JobCell"
      let name = "JobCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "calendar-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar-icon' is used in nib 'JobCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "courior-taxi-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'courior-taxi-icon' is used in nib 'JobCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "street-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'street-icon' is used in nib 'JobCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'JobCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _JobInfoTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = JobInfoTypeCell

      let bundle = R.hostingBundle
      let identifier = "JobInfoTypeCell"
      let name = "JobInfoTypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobInfoTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobInfoTypeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-sidemenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-sidemenu' is used in nib 'JobInfoTypeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in nib 'JobInfoTypeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _JobMarkerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JobMarkerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrowtriangle.down.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowtriangle.down.fill' is used in nib 'JobMarkerView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'JobMarkerView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _JobPhotoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = JobPhotoCell

      let bundle = R.hostingBundle
      let identifier = "JobPhotoCell"
      let name = "JobPhotoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> JobPhotoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JobPhotoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "img", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img' is used in nib 'JobPhotoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LanguageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LanguageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete-icon' is used in nib 'LanguageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-tools-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-tools-icon' is used in nib 'LanguageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'LanguageCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationCell

      let bundle = R.hostingBundle
      let identifier = "NotificationCell"
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OnboardingCell

      let bundle = R.hostingBundle
      let identifier = "OnboardingCell"
      let name = "OnboardingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnboardingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnboardingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "art-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'art-3' is used in nib 'OnboardingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PaymentMethodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PaymentMethodCell

      let bundle = R.hostingBundle
      let identifier = "PaymentMethodCell"
      let name = "PaymentMethodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentMethodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "add-new-card-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-new-card-icon' is used in nib 'PaymentMethodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PortfolioCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PortfolioCell

      let bundle = R.hostingBundle
      let identifier = "PortfolioCell"
      let name = "PortfolioCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PortfolioCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PortfolioCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete-icon' is used in nib 'PortfolioCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-tools-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-tools-icon' is used in nib 'PortfolioCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in nib 'PortfolioCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'PortfolioCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProfileOptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileOptionCell

      let bundle = R.hostingBundle
      let identifier = "ProfileOptionCell"
      let name = "ProfileOptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileOptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileOptionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-sidemenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-sidemenu' is used in nib 'ProfileOptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProviderBidCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderBidCell

      let bundle = R.hostingBundle
      let identifier = "ProviderBidCell"
      let name = "ProviderBidCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderBidCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderBidCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Chat icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Chat icon' is used in nib 'ProviderBidCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Pin-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pin-location' is used in nib 'ProviderBidCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "accept-icon-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accept-icon-1' is used in nib 'ProviderBidCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "decline-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'decline-icon' is used in nib 'ProviderBidCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed' is used in nib 'ProviderBidCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'ProviderBidCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProviderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderCell

      let bundle = R.hostingBundle
      let identifier = "ProviderCell"
      let name = "ProviderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Pin-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pin-location' is used in nib 'ProviderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed' is used in nib 'ProviderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProviderListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProviderListCell

      let bundle = R.hostingBundle
      let identifier = "ProviderListCell"
      let name = "ProviderListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProviderListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProviderListCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Pin-location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pin-location' is used in nib 'ProviderListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed' is used in nib 'ProviderListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RectangularImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RectangularImageCell

      let bundle = R.hostingBundle
      let identifier = "RectangularImageCell"
      let name = "RectangularImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RectangularImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RectangularImageCell
      }

      fileprivate init() {}
    }

    struct _ReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReviewCell

      let bundle = R.hostingBundle
      let identifier = "ReviewCell"
      let name = "ReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in nib 'ReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SelectCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectCategoryCell

      let bundle = R.hostingBundle
      let identifier = "SelectCategoryCell"
      let name = "SelectCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "air-conditioner", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'air-conditioner' is used in nib 'SelectCategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SelectLocationVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectLocationVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-left-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-left-back' is used in nib 'SelectLocationVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "marker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'marker' is used in nib 'SelectLocationVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'SelectLocationVC', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SelectPicturesView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectPicturesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "camera-small-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera-small-icon' is used in nib 'SelectPicturesView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel-icon' is used in nib 'SelectPicturesView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'SelectPicturesView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'SelectPicturesView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SetPriceView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SetPriceView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cancel-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel-icon' is used in nib 'SetPriceView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'SetPriceView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'SetPriceView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SideCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SideCell

      let bundle = R.hostingBundle
      let identifier = "SideCell"
      let name = "SideCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SideCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideCell
      }

      fileprivate init() {}
    }

    struct _SubCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SubCategoryCell

      let bundle = R.hostingBundle
      let identifier = "SubCategoryCell"
      let name = "SubCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in nib 'SubCategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try authentication.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try details.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try helpSupport.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try newJob.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try sideMenu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tabBar.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct authentication: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginVC

      let bundle = R.hostingBundle
      let changePassVC = StoryboardViewControllerResource<ChangePassVC>(identifier: "ChangePassVC")
      let countryCodeSearchViewController = StoryboardViewControllerResource<CountryCodeSearchViewController>(identifier: "CountryCodeSearchViewController")
      let forgotPassVC = StoryboardViewControllerResource<ForgotPassVC>(identifier: "ForgotPassVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Authentication"
      let recoveryPassVC = StoryboardViewControllerResource<RecoveryPassVC>(identifier: "RecoveryPassVC")
      let signupBasicDetailsVC = StoryboardViewControllerResource<SignupBasicDetailsVC>(identifier: "SignupBasicDetailsVC")
      let signupCategoryVC = StoryboardViewControllerResource<SignupCategoryVC>(identifier: "SignupCategoryVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")

      func changePassVC(_: Void = ()) -> ChangePassVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePassVC)
      }

      func countryCodeSearchViewController(_: Void = ()) -> CountryCodeSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: countryCodeSearchViewController)
      }

      func forgotPassVC(_: Void = ()) -> ForgotPassVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPassVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func recoveryPassVC(_: Void = ()) -> RecoveryPassVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recoveryPassVC)
      }

      func signupBasicDetailsVC(_: Void = ()) -> SignupBasicDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupBasicDetailsVC)
      }

      func signupCategoryVC(_: Void = ()) -> SignupCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupCategoryVC)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-left-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-left-back' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Cricle  login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cricle  login' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook-icon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google-plus-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google-plus-icon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "remember-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'remember-icon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'Authentication', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'Authentication', but couldn't be loaded.") }
        }
        if _R.storyboard.authentication().changePassVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePassVC' could not be loaded from storyboard 'Authentication' as 'ChangePassVC'.") }
        if _R.storyboard.authentication().countryCodeSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'countryCodeSearchViewController' could not be loaded from storyboard 'Authentication' as 'CountryCodeSearchViewController'.") }
        if _R.storyboard.authentication().forgotPassVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPassVC' could not be loaded from storyboard 'Authentication' as 'ForgotPassVC'.") }
        if _R.storyboard.authentication().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Authentication' as 'LoginVC'.") }
        if _R.storyboard.authentication().recoveryPassVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recoveryPassVC' could not be loaded from storyboard 'Authentication' as 'RecoveryPassVC'.") }
        if _R.storyboard.authentication().signupBasicDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupBasicDetailsVC' could not be loaded from storyboard 'Authentication' as 'SignupBasicDetailsVC'.") }
        if _R.storyboard.authentication().signupCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupCategoryVC' could not be loaded from storyboard 'Authentication' as 'SignupCategoryVC'.") }
        if _R.storyboard.authentication().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Authentication' as 'SignupVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct details: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let businessHourVC = StoryboardViewControllerResource<BusinessHourVC>(identifier: "BusinessHourVC")
      let certificatesVC = StoryboardViewControllerResource<CertificatesVC>(identifier: "CertificatesVC")
      let currentJobVC = StoryboardViewControllerResource<CurrentJobVC>(identifier: "CurrentJobVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let identitiesVC = StoryboardViewControllerResource<IdentitiesVC>(identifier: "IdentitiesVC")
      let invoiceVC = StoryboardViewControllerResource<InvoiceVC>(identifier: "InvoiceVC")
      let jobDetailsVC = StoryboardViewControllerResource<JobDetailsVC>(identifier: "JobDetailsVC")
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let name = "Details"
      let paymentConfirmationVC = StoryboardViewControllerResource<PaymentConfirmationVC>(identifier: "PaymentConfirmationVC")
      let paymentMethodsVC = StoryboardViewControllerResource<PaymentMethodsVC>(identifier: "PaymentMethodsVC")
      let portfolioVC = StoryboardViewControllerResource<PortfolioVC>(identifier: "PortfolioVC")
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")
      let providerProfileVC = StoryboardViewControllerResource<ProviderProfileVC>(identifier: "ProviderProfileVC")
      let startJobVC = StoryboardViewControllerResource<StartJobVC>(identifier: "StartJobVC")

      func businessHourVC(_: Void = ()) -> BusinessHourVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessHourVC)
      }

      func certificatesVC(_: Void = ()) -> CertificatesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: certificatesVC)
      }

      func currentJobVC(_: Void = ()) -> CurrentJobVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currentJobVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func identitiesVC(_: Void = ()) -> IdentitiesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: identitiesVC)
      }

      func invoiceVC(_: Void = ()) -> InvoiceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invoiceVC)
      }

      func jobDetailsVC(_: Void = ()) -> JobDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jobDetailsVC)
      }

      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }

      func paymentConfirmationVC(_: Void = ()) -> PaymentConfirmationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentConfirmationVC)
      }

      func paymentMethodsVC(_: Void = ()) -> PaymentMethodsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentMethodsVC)
      }

      func portfolioVC(_: Void = ()) -> PortfolioVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: portfolioVC)
      }

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      func providerProfileVC(_: Void = ()) -> ProviderProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: providerProfileVC)
      }

      func startJobVC(_: Void = ()) -> StartJobVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: startJobVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-left-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-left-back' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tracking-upcomingscreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tracking-upcomingscreen' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-card-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-card-icon' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar-icon-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar-icon-1' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle-home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle-home' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-tools-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-tools-icon' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favorite-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favorite-icon' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "marker-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'marker-icon' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus-icon-small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus-icon-small' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sharpCut", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sharpCut' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sideArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sideArrow' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thanku-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'thanku-icon' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timer-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timer-icon' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed' is used in storyboard 'Details', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Details', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'Details', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'Details', but couldn't be loaded.") }
        }
        if _R.storyboard.details().businessHourVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessHourVC' could not be loaded from storyboard 'Details' as 'BusinessHourVC'.") }
        if _R.storyboard.details().certificatesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'certificatesVC' could not be loaded from storyboard 'Details' as 'CertificatesVC'.") }
        if _R.storyboard.details().currentJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currentJobVC' could not be loaded from storyboard 'Details' as 'CurrentJobVC'.") }
        if _R.storyboard.details().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Details' as 'EditProfileVC'.") }
        if _R.storyboard.details().identitiesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'identitiesVC' could not be loaded from storyboard 'Details' as 'IdentitiesVC'.") }
        if _R.storyboard.details().invoiceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invoiceVC' could not be loaded from storyboard 'Details' as 'InvoiceVC'.") }
        if _R.storyboard.details().jobDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jobDetailsVC' could not be loaded from storyboard 'Details' as 'JobDetailsVC'.") }
        if _R.storyboard.details().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'Details' as 'LanguageVC'.") }
        if _R.storyboard.details().paymentConfirmationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentConfirmationVC' could not be loaded from storyboard 'Details' as 'PaymentConfirmationVC'.") }
        if _R.storyboard.details().paymentMethodsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentMethodsVC' could not be loaded from storyboard 'Details' as 'PaymentMethodsVC'.") }
        if _R.storyboard.details().portfolioVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'portfolioVC' could not be loaded from storyboard 'Details' as 'PortfolioVC'.") }
        if _R.storyboard.details().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Details' as 'ProfileVC'.") }
        if _R.storyboard.details().providerProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'providerProfileVC' could not be loaded from storyboard 'Details' as 'ProviderProfileVC'.") }
        if _R.storyboard.details().startJobVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'startJobVC' could not be loaded from storyboard 'Details' as 'StartJobVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct helpSupport: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutUsVC = StoryboardViewControllerResource<AboutUsVC>(identifier: "AboutUsVC")
      let addReviewVC = StoryboardViewControllerResource<AddReviewVC>(identifier: "AddReviewVC")
      let bundle = R.hostingBundle
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let helpVC = StoryboardViewControllerResource<HelpVC>(identifier: "HelpVC")
      let name = "HelpSupport"
      let termsVC = StoryboardViewControllerResource<TermsVC>(identifier: "TermsVC")

      func aboutUsVC(_: Void = ()) -> AboutUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutUsVC)
      }

      func addReviewVC(_: Void = ()) -> AddReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addReviewVC)
      }

      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }

      func helpVC(_: Void = ()) -> HelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpVC)
      }

      func termsVC(_: Void = ()) -> TermsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-left-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-left-back' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Chat icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Chat icon' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mail' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sharpCut", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sharpCut' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'HelpSupport', but couldn't be loaded.") }
        }
        if _R.storyboard.helpSupport().aboutUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutUsVC' could not be loaded from storyboard 'HelpSupport' as 'AboutUsVC'.") }
        if _R.storyboard.helpSupport().addReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addReviewVC' could not be loaded from storyboard 'HelpSupport' as 'AddReviewVC'.") }
        if _R.storyboard.helpSupport().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'HelpSupport' as 'ChatVC'.") }
        if _R.storyboard.helpSupport().helpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'HelpSupport' as 'HelpVC'.") }
        if _R.storyboard.helpSupport().termsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsVC' could not be loaded from storyboard 'HelpSupport' as 'TermsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OnboardingVC

      let bundle = R.hostingBundle
      let name = "Main"
      let onboardingVC = StoryboardViewControllerResource<OnboardingVC>(identifier: "OnboardingVC")

      func onboardingVC(_: Void = ()) -> OnboardingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "dots-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dots-black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dots.gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'dots.gray' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().onboardingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingVC' could not be loaded from storyboard 'Main' as 'OnboardingVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct newJob: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addAddressVC = StoryboardViewControllerResource<AddAddressVC>(identifier: "AddAddressVC")
      let addDescriptionVC = StoryboardViewControllerResource<AddDescriptionVC>(identifier: "AddDescriptionVC")
      let addInfoTypeVC = StoryboardViewControllerResource<AddInfoTypeVC>(identifier: "AddInfoTypeVC")
      let addTimeVC = StoryboardViewControllerResource<AddTimeVC>(identifier: "AddTimeVC")
      let bundle = R.hostingBundle
      let name = "NewJob"
      let selectCategoryVC = StoryboardViewControllerResource<SelectCategoryVC>(identifier: "SelectCategoryVC")
      let selectDateTimeVC = StoryboardViewControllerResource<SelectDateTimeVC>(identifier: "SelectDateTimeVC")
      let selectSubCategoryVC = StoryboardViewControllerResource<SelectSubCategoryVC>(identifier: "SelectSubCategoryVC")

      func addAddressVC(_: Void = ()) -> AddAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAddressVC)
      }

      func addDescriptionVC(_: Void = ()) -> AddDescriptionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addDescriptionVC)
      }

      func addInfoTypeVC(_: Void = ()) -> AddInfoTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addInfoTypeVC)
      }

      func addTimeVC(_: Void = ()) -> AddTimeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addTimeVC)
      }

      func selectCategoryVC(_: Void = ()) -> SelectCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectCategoryVC)
      }

      func selectDateTimeVC(_: Void = ()) -> SelectDateTimeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectDateTimeVC)
      }

      func selectSubCategoryVC(_: Void = ()) -> SelectSubCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectSubCategoryVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-sidemenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-sidemenu' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Cricle  login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cricle  login' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Today-icon-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Today-icon-1' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendar-icon-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar-icon-1' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favorite-footer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favorite-footer' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "now-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'now-icon' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sharpCut", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sharpCut' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if UIKit.UIImage(named: "today-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'today-icon' is used in storyboard 'NewJob', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'NewJob', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'NewJob', but couldn't be loaded.") }
        }
        if _R.storyboard.newJob().addAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAddressVC' could not be loaded from storyboard 'NewJob' as 'AddAddressVC'.") }
        if _R.storyboard.newJob().addDescriptionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addDescriptionVC' could not be loaded from storyboard 'NewJob' as 'AddDescriptionVC'.") }
        if _R.storyboard.newJob().addInfoTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addInfoTypeVC' could not be loaded from storyboard 'NewJob' as 'AddInfoTypeVC'.") }
        if _R.storyboard.newJob().addTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addTimeVC' could not be loaded from storyboard 'NewJob' as 'AddTimeVC'.") }
        if _R.storyboard.newJob().selectCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectCategoryVC' could not be loaded from storyboard 'NewJob' as 'SelectCategoryVC'.") }
        if _R.storyboard.newJob().selectDateTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectDateTimeVC' could not be loaded from storyboard 'NewJob' as 'SelectDateTimeVC'.") }
        if _R.storyboard.newJob().selectSubCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectSubCategoryVC' could not be loaded from storyboard 'NewJob' as 'SelectSubCategoryVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct sideMenu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let historyVC = StoryboardViewControllerResource<HistoryVC>(identifier: "HistoryVC")
      let name = "SideMenu"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")
      let reviewsVC = StoryboardViewControllerResource<ReviewsVC>(identifier: "ReviewsVC")
      let sideMenuVC = StoryboardViewControllerResource<SideMenuVC>(identifier: "SideMenuVC")

      func historyVC(_: Void = ()) -> HistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyVC)
      }

      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }

      func reviewsVC(_: Void = ()) -> ReviewsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reviewsVC)
      }

      func sideMenuVC(_: Void = ()) -> SideMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-left-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-left-back' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backArr", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backArr' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu-icon-top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu-icon-top' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification-top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification-top' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sharpCut", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sharpCut' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'SideMenu', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'SideMenu', but couldn't be loaded.") }
        }
        if _R.storyboard.sideMenu().historyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyVC' could not be loaded from storyboard 'SideMenu' as 'HistoryVC'.") }
        if _R.storyboard.sideMenu().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'SideMenu' as 'NotificationsVC'.") }
        if _R.storyboard.sideMenu().reviewsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reviewsVC' could not be loaded from storyboard 'SideMenu' as 'ReviewsVC'.") }
        if _R.storyboard.sideMenu().sideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuVC' could not be loaded from storyboard 'SideMenu' as 'SideMenuVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tabBar: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let favouritesVC = StoryboardViewControllerResource<FavouritesVC>(identifier: "FavouritesVC")
      let filterVC = StoryboardViewControllerResource<FilterVC>(identifier: "FilterVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let inboxVC = StoryboardViewControllerResource<InboxVC>(identifier: "InboxVC")
      let myJobsVC = StoryboardViewControllerResource<MyJobsVC>(identifier: "MyJobsVC")
      let name = "TabBar"
      let notificationsVC = StoryboardViewControllerResource<NotificationsVC>(identifier: "NotificationsVC")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      let tabVC = StoryboardViewControllerResource<TabVC>(identifier: "TabVC")

      func favouritesVC(_: Void = ()) -> FavouritesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favouritesVC)
      }

      func filterVC(_: Void = ()) -> FilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func inboxVC(_: Void = ()) -> InboxVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inboxVC)
      }

      func myJobsVC(_: Void = ()) -> MyJobsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myJobsVC)
      }

      func notificationsVC(_: Void = ()) -> NotificationsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsVC)
      }

      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }

      func tabVC(_: Void = ()) -> TabVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Arrow-left-back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrow-left-back' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home- icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home- icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add-work-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add-work-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle-home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle-home' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favorite-footer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favorite-footer' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line.horizontal.3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line.horizontal.3' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "list-footer-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'list-footer-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "message-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'message-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "messge-search-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'messge-search-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification-top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification-top' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setting-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'setting-icon' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sharpCut", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sharpCut' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'TabBar', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "greyBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'greyBack' is used in storyboard 'TabBar', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'TabBar', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'TabBar', but couldn't be loaded.") }
        }
        if _R.storyboard.tabBar().favouritesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favouritesVC' could not be loaded from storyboard 'TabBar' as 'FavouritesVC'.") }
        if _R.storyboard.tabBar().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'TabBar' as 'FilterVC'.") }
        if _R.storyboard.tabBar().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'TabBar' as 'HomeVC'.") }
        if _R.storyboard.tabBar().inboxVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inboxVC' could not be loaded from storyboard 'TabBar' as 'InboxVC'.") }
        if _R.storyboard.tabBar().myJobsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myJobsVC' could not be loaded from storyboard 'TabBar' as 'MyJobsVC'.") }
        if _R.storyboard.tabBar().notificationsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsVC' could not be loaded from storyboard 'TabBar' as 'NotificationsVC'.") }
        if _R.storyboard.tabBar().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'TabBar' as 'SettingsVC'.") }
        if _R.storyboard.tabBar().tabVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabVC' could not be loaded from storyboard 'TabBar' as 'TabVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
